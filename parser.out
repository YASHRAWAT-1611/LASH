Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> var_decl
Rule 5     statement -> var_assign
Rule 6     statement -> func_def
Rule 7     statement -> func_call
Rule 8     statement -> show_stmt
Rule 9     statement -> ask_stmt
Rule 10    statement -> if_statement
Rule 11    statement -> loop_statement
Rule 12    statement -> class_def
Rule 13    statement -> return_stmt
Rule 14    statement -> loop_control
Rule 15    var_decl -> IDENTIFIER expression
Rule 16    var_assign -> IDENTIFIER EQUALS expression
Rule 17    func_def -> FN IDENTIFIER LPAREN parameters RPAREN block
Rule 18    parameters -> parameter_list
Rule 19    parameters -> empty
Rule 20    parameter_list -> IDENTIFIER
Rule 21    parameter_list -> parameter_list COMMA IDENTIFIER
Rule 22    func_call -> IDENTIFIER LPAREN arguments RPAREN
Rule 23    arguments -> argument_list
Rule 24    arguments -> empty
Rule 25    argument_list -> expression
Rule 26    argument_list -> argument_list COMMA expression
Rule 27    show_stmt -> SHOW expression
Rule 28    ask_stmt -> IDENTIFIER ASK expression
Rule 29    ask_stmt -> IDENTIFIER ASK expression expression
Rule 30    if_statement -> IF expression block elseif_list else_block
Rule 31    elseif_list -> elseif_list elseif
Rule 32    elseif_list -> empty
Rule 33    elseif -> ELSEIF expression block
Rule 34    else_block -> ELSE block
Rule 35    else_block -> empty
Rule 36    loop_statement -> REPEAT expression block
Rule 37    loop_statement -> LOOP expression block
Rule 38    loop_control -> STOP
Rule 39    loop_control -> SKIP
Rule 40    return_stmt -> RETURN
Rule 41    return_stmt -> RETURN expression
Rule 42    class_def -> CLASS IDENTIFIER block
Rule 43    block -> LBRACE statement_list RBRACE
Rule 44    expression -> expression PLUS expression
Rule 45    expression -> expression MINUS expression
Rule 46    expression -> expression TIMES expression
Rule 47    expression -> expression DIVIDE expression
Rule 48    expression -> expression MOD expression
Rule 49    expression -> expression POWER expression
Rule 50    expression -> expression GT expression
Rule 51    expression -> expression LT expression
Rule 52    expression -> expression GE expression
Rule 53    expression -> expression LE expression
Rule 54    expression -> expression EQEQ expression
Rule 55    expression -> expression NEQ expression
Rule 56    expression -> expression AND expression
Rule 57    expression -> expression OR expression
Rule 58    expression -> NOT expression
Rule 59    expression -> MINUS expression
Rule 60    expression -> LPAREN expression RPAREN
Rule 61    expression -> TO_NUM LPAREN expression RPAREN
Rule 62    expression -> TO_STR LPAREN expression RPAREN
Rule 63    expression -> TO_FLOAT LPAREN expression RPAREN
Rule 64    expression -> LBRACKET array_items RBRACKET
Rule 65    array_items -> expression_list
Rule 66    array_items -> empty
Rule 67    expression_list -> expression
Rule 68    expression_list -> expression_list COMMA expression
Rule 69    expression -> expression LBRACKET expression RBRACKET
Rule 70    expression -> LBRACE dict_items RBRACE
Rule 71    dict_items -> dict_item_list
Rule 72    dict_items -> empty
Rule 73    dict_item_list -> dict_item
Rule 74    dict_item_list -> dict_item_list COMMA dict_item
Rule 75    dict_item -> expression COLON expression
Rule 76    expression -> NUMBER
Rule 77    expression -> STRING
Rule 78    expression -> IDENTIFIER
Rule 79    empty -> <empty>

Terminals, with rules where they appear

AND                  : 56
ASK                  : 28 29
CLASS                : 42
COLON                : 75
COMMA                : 21 26 68 74
DIVIDE               : 47
DOT                  : 
ELSE                 : 34
ELSEIF               : 33
EQEQ                 : 54
EQUALS               : 16
FN                   : 17
GE                   : 52
GT                   : 50
IDENTIFIER           : 15 16 17 20 21 22 28 29 42 78
IF                   : 30
LBRACE               : 43 70
LBRACKET             : 64 69
LE                   : 53
LOOP                 : 37
LPAREN               : 17 22 60 61 62 63
LT                   : 51
MINUS                : 45 59
MOD                  : 48
NEQ                  : 55
NOT                  : 58
NUMBER               : 76
OR                   : 57
PLUS                 : 44
POWER                : 49
RBRACE               : 43 70
RBRACKET             : 64 69
REPEAT               : 36
RETURN               : 40 41
RPAREN               : 17 22 60 61 62 63
SHOW                 : 27
SKIP                 : 39
STOP                 : 38
STRING               : 77
TIMES                : 46
TO_FLOAT             : 63
TO_NUM               : 61
TO_STR               : 62
error                : 

Nonterminals, with rules where they appear

argument_list        : 23 26
arguments            : 22
array_items          : 64
ask_stmt             : 9
block                : 17 30 33 34 36 37 42
class_def            : 12
dict_item            : 73 74
dict_item_list       : 71 74
dict_items           : 70
else_block           : 30
elseif               : 31
elseif_list          : 30 31
empty                : 19 24 32 35 66 72
expression           : 15 16 25 26 27 28 29 29 30 33 36 37 41 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 59 60 61 62 63 67 68 69 69 75 75
expression_list      : 65 68
func_call            : 7
func_def             : 6
if_statement         : 10
loop_control         : 14
loop_statement       : 11
parameter_list       : 18 21
parameters           : 17
program              : 0
return_stmt          : 13
show_stmt            : 8
statement            : 2 3
statement_list       : 1 3 43
var_assign           : 5
var_decl             : 4

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . var_decl
    (5) statement -> . var_assign
    (6) statement -> . func_def
    (7) statement -> . func_call
    (8) statement -> . show_stmt
    (9) statement -> . ask_stmt
    (10) statement -> . if_statement
    (11) statement -> . loop_statement
    (12) statement -> . class_def
    (13) statement -> . return_stmt
    (14) statement -> . loop_control
    (15) var_decl -> . IDENTIFIER expression
    (16) var_assign -> . IDENTIFIER EQUALS expression
    (17) func_def -> . FN IDENTIFIER LPAREN parameters RPAREN block
    (22) func_call -> . IDENTIFIER LPAREN arguments RPAREN
    (27) show_stmt -> . SHOW expression
    (28) ask_stmt -> . IDENTIFIER ASK expression
    (29) ask_stmt -> . IDENTIFIER ASK expression expression
    (30) if_statement -> . IF expression block elseif_list else_block
    (36) loop_statement -> . REPEAT expression block
    (37) loop_statement -> . LOOP expression block
    (42) class_def -> . CLASS IDENTIFIER block
    (40) return_stmt -> . RETURN
    (41) return_stmt -> . RETURN expression
    (38) loop_control -> . STOP
    (39) loop_control -> . SKIP

    IDENTIFIER      shift and go to state 15
    FN              shift and go to state 16
    SHOW            shift and go to state 17
    IF              shift and go to state 18
    REPEAT          shift and go to state 19
    LOOP            shift and go to state 20
    CLASS           shift and go to state 21
    RETURN          shift and go to state 22
    STOP            shift and go to state 23
    SKIP            shift and go to state 24

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    var_decl                       shift and go to state 4
    var_assign                     shift and go to state 5
    func_def                       shift and go to state 6
    func_call                      shift and go to state 7
    show_stmt                      shift and go to state 8
    ask_stmt                       shift and go to state 9
    if_statement                   shift and go to state 10
    loop_statement                 shift and go to state 11
    class_def                      shift and go to state 12
    return_stmt                    shift and go to state 13
    loop_control                   shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . var_decl
    (5) statement -> . var_assign
    (6) statement -> . func_def
    (7) statement -> . func_call
    (8) statement -> . show_stmt
    (9) statement -> . ask_stmt
    (10) statement -> . if_statement
    (11) statement -> . loop_statement
    (12) statement -> . class_def
    (13) statement -> . return_stmt
    (14) statement -> . loop_control
    (15) var_decl -> . IDENTIFIER expression
    (16) var_assign -> . IDENTIFIER EQUALS expression
    (17) func_def -> . FN IDENTIFIER LPAREN parameters RPAREN block
    (22) func_call -> . IDENTIFIER LPAREN arguments RPAREN
    (27) show_stmt -> . SHOW expression
    (28) ask_stmt -> . IDENTIFIER ASK expression
    (29) ask_stmt -> . IDENTIFIER ASK expression expression
    (30) if_statement -> . IF expression block elseif_list else_block
    (36) loop_statement -> . REPEAT expression block
    (37) loop_statement -> . LOOP expression block
    (42) class_def -> . CLASS IDENTIFIER block
    (40) return_stmt -> . RETURN
    (41) return_stmt -> . RETURN expression
    (38) loop_control -> . STOP
    (39) loop_control -> . SKIP

    $end            reduce using rule 1 (program -> statement_list .)
    IDENTIFIER      shift and go to state 15
    FN              shift and go to state 16
    SHOW            shift and go to state 17
    IF              shift and go to state 18
    REPEAT          shift and go to state 19
    LOOP            shift and go to state 20
    CLASS           shift and go to state 21
    RETURN          shift and go to state 22
    STOP            shift and go to state 23
    SKIP            shift and go to state 24

    statement                      shift and go to state 25
    var_decl                       shift and go to state 4
    var_assign                     shift and go to state 5
    func_def                       shift and go to state 6
    func_call                      shift and go to state 7
    show_stmt                      shift and go to state 8
    ask_stmt                       shift and go to state 9
    if_statement                   shift and go to state 10
    loop_statement                 shift and go to state 11
    class_def                      shift and go to state 12
    return_stmt                    shift and go to state 13
    loop_control                   shift and go to state 14

state 3

    (2) statement_list -> statement .

    IDENTIFIER      reduce using rule 2 (statement_list -> statement .)
    FN              reduce using rule 2 (statement_list -> statement .)
    SHOW            reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    REPEAT          reduce using rule 2 (statement_list -> statement .)
    LOOP            reduce using rule 2 (statement_list -> statement .)
    CLASS           reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    STOP            reduce using rule 2 (statement_list -> statement .)
    SKIP            reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> var_decl .

    IDENTIFIER      reduce using rule 4 (statement -> var_decl .)
    FN              reduce using rule 4 (statement -> var_decl .)
    SHOW            reduce using rule 4 (statement -> var_decl .)
    IF              reduce using rule 4 (statement -> var_decl .)
    REPEAT          reduce using rule 4 (statement -> var_decl .)
    LOOP            reduce using rule 4 (statement -> var_decl .)
    CLASS           reduce using rule 4 (statement -> var_decl .)
    RETURN          reduce using rule 4 (statement -> var_decl .)
    STOP            reduce using rule 4 (statement -> var_decl .)
    SKIP            reduce using rule 4 (statement -> var_decl .)
    $end            reduce using rule 4 (statement -> var_decl .)
    RBRACE          reduce using rule 4 (statement -> var_decl .)


state 5

    (5) statement -> var_assign .

    IDENTIFIER      reduce using rule 5 (statement -> var_assign .)
    FN              reduce using rule 5 (statement -> var_assign .)
    SHOW            reduce using rule 5 (statement -> var_assign .)
    IF              reduce using rule 5 (statement -> var_assign .)
    REPEAT          reduce using rule 5 (statement -> var_assign .)
    LOOP            reduce using rule 5 (statement -> var_assign .)
    CLASS           reduce using rule 5 (statement -> var_assign .)
    RETURN          reduce using rule 5 (statement -> var_assign .)
    STOP            reduce using rule 5 (statement -> var_assign .)
    SKIP            reduce using rule 5 (statement -> var_assign .)
    $end            reduce using rule 5 (statement -> var_assign .)
    RBRACE          reduce using rule 5 (statement -> var_assign .)


state 6

    (6) statement -> func_def .

    IDENTIFIER      reduce using rule 6 (statement -> func_def .)
    FN              reduce using rule 6 (statement -> func_def .)
    SHOW            reduce using rule 6 (statement -> func_def .)
    IF              reduce using rule 6 (statement -> func_def .)
    REPEAT          reduce using rule 6 (statement -> func_def .)
    LOOP            reduce using rule 6 (statement -> func_def .)
    CLASS           reduce using rule 6 (statement -> func_def .)
    RETURN          reduce using rule 6 (statement -> func_def .)
    STOP            reduce using rule 6 (statement -> func_def .)
    SKIP            reduce using rule 6 (statement -> func_def .)
    $end            reduce using rule 6 (statement -> func_def .)
    RBRACE          reduce using rule 6 (statement -> func_def .)


state 7

    (7) statement -> func_call .

    IDENTIFIER      reduce using rule 7 (statement -> func_call .)
    FN              reduce using rule 7 (statement -> func_call .)
    SHOW            reduce using rule 7 (statement -> func_call .)
    IF              reduce using rule 7 (statement -> func_call .)
    REPEAT          reduce using rule 7 (statement -> func_call .)
    LOOP            reduce using rule 7 (statement -> func_call .)
    CLASS           reduce using rule 7 (statement -> func_call .)
    RETURN          reduce using rule 7 (statement -> func_call .)
    STOP            reduce using rule 7 (statement -> func_call .)
    SKIP            reduce using rule 7 (statement -> func_call .)
    $end            reduce using rule 7 (statement -> func_call .)
    RBRACE          reduce using rule 7 (statement -> func_call .)


state 8

    (8) statement -> show_stmt .

    IDENTIFIER      reduce using rule 8 (statement -> show_stmt .)
    FN              reduce using rule 8 (statement -> show_stmt .)
    SHOW            reduce using rule 8 (statement -> show_stmt .)
    IF              reduce using rule 8 (statement -> show_stmt .)
    REPEAT          reduce using rule 8 (statement -> show_stmt .)
    LOOP            reduce using rule 8 (statement -> show_stmt .)
    CLASS           reduce using rule 8 (statement -> show_stmt .)
    RETURN          reduce using rule 8 (statement -> show_stmt .)
    STOP            reduce using rule 8 (statement -> show_stmt .)
    SKIP            reduce using rule 8 (statement -> show_stmt .)
    $end            reduce using rule 8 (statement -> show_stmt .)
    RBRACE          reduce using rule 8 (statement -> show_stmt .)


state 9

    (9) statement -> ask_stmt .

    IDENTIFIER      reduce using rule 9 (statement -> ask_stmt .)
    FN              reduce using rule 9 (statement -> ask_stmt .)
    SHOW            reduce using rule 9 (statement -> ask_stmt .)
    IF              reduce using rule 9 (statement -> ask_stmt .)
    REPEAT          reduce using rule 9 (statement -> ask_stmt .)
    LOOP            reduce using rule 9 (statement -> ask_stmt .)
    CLASS           reduce using rule 9 (statement -> ask_stmt .)
    RETURN          reduce using rule 9 (statement -> ask_stmt .)
    STOP            reduce using rule 9 (statement -> ask_stmt .)
    SKIP            reduce using rule 9 (statement -> ask_stmt .)
    $end            reduce using rule 9 (statement -> ask_stmt .)
    RBRACE          reduce using rule 9 (statement -> ask_stmt .)


state 10

    (10) statement -> if_statement .

    IDENTIFIER      reduce using rule 10 (statement -> if_statement .)
    FN              reduce using rule 10 (statement -> if_statement .)
    SHOW            reduce using rule 10 (statement -> if_statement .)
    IF              reduce using rule 10 (statement -> if_statement .)
    REPEAT          reduce using rule 10 (statement -> if_statement .)
    LOOP            reduce using rule 10 (statement -> if_statement .)
    CLASS           reduce using rule 10 (statement -> if_statement .)
    RETURN          reduce using rule 10 (statement -> if_statement .)
    STOP            reduce using rule 10 (statement -> if_statement .)
    SKIP            reduce using rule 10 (statement -> if_statement .)
    $end            reduce using rule 10 (statement -> if_statement .)
    RBRACE          reduce using rule 10 (statement -> if_statement .)


state 11

    (11) statement -> loop_statement .

    IDENTIFIER      reduce using rule 11 (statement -> loop_statement .)
    FN              reduce using rule 11 (statement -> loop_statement .)
    SHOW            reduce using rule 11 (statement -> loop_statement .)
    IF              reduce using rule 11 (statement -> loop_statement .)
    REPEAT          reduce using rule 11 (statement -> loop_statement .)
    LOOP            reduce using rule 11 (statement -> loop_statement .)
    CLASS           reduce using rule 11 (statement -> loop_statement .)
    RETURN          reduce using rule 11 (statement -> loop_statement .)
    STOP            reduce using rule 11 (statement -> loop_statement .)
    SKIP            reduce using rule 11 (statement -> loop_statement .)
    $end            reduce using rule 11 (statement -> loop_statement .)
    RBRACE          reduce using rule 11 (statement -> loop_statement .)


state 12

    (12) statement -> class_def .

    IDENTIFIER      reduce using rule 12 (statement -> class_def .)
    FN              reduce using rule 12 (statement -> class_def .)
    SHOW            reduce using rule 12 (statement -> class_def .)
    IF              reduce using rule 12 (statement -> class_def .)
    REPEAT          reduce using rule 12 (statement -> class_def .)
    LOOP            reduce using rule 12 (statement -> class_def .)
    CLASS           reduce using rule 12 (statement -> class_def .)
    RETURN          reduce using rule 12 (statement -> class_def .)
    STOP            reduce using rule 12 (statement -> class_def .)
    SKIP            reduce using rule 12 (statement -> class_def .)
    $end            reduce using rule 12 (statement -> class_def .)
    RBRACE          reduce using rule 12 (statement -> class_def .)


state 13

    (13) statement -> return_stmt .

    IDENTIFIER      reduce using rule 13 (statement -> return_stmt .)
    FN              reduce using rule 13 (statement -> return_stmt .)
    SHOW            reduce using rule 13 (statement -> return_stmt .)
    IF              reduce using rule 13 (statement -> return_stmt .)
    REPEAT          reduce using rule 13 (statement -> return_stmt .)
    LOOP            reduce using rule 13 (statement -> return_stmt .)
    CLASS           reduce using rule 13 (statement -> return_stmt .)
    RETURN          reduce using rule 13 (statement -> return_stmt .)
    STOP            reduce using rule 13 (statement -> return_stmt .)
    SKIP            reduce using rule 13 (statement -> return_stmt .)
    $end            reduce using rule 13 (statement -> return_stmt .)
    RBRACE          reduce using rule 13 (statement -> return_stmt .)


state 14

    (14) statement -> loop_control .

    IDENTIFIER      reduce using rule 14 (statement -> loop_control .)
    FN              reduce using rule 14 (statement -> loop_control .)
    SHOW            reduce using rule 14 (statement -> loop_control .)
    IF              reduce using rule 14 (statement -> loop_control .)
    REPEAT          reduce using rule 14 (statement -> loop_control .)
    LOOP            reduce using rule 14 (statement -> loop_control .)
    CLASS           reduce using rule 14 (statement -> loop_control .)
    RETURN          reduce using rule 14 (statement -> loop_control .)
    STOP            reduce using rule 14 (statement -> loop_control .)
    SKIP            reduce using rule 14 (statement -> loop_control .)
    $end            reduce using rule 14 (statement -> loop_control .)
    RBRACE          reduce using rule 14 (statement -> loop_control .)


state 15

    (15) var_decl -> IDENTIFIER . expression
    (16) var_assign -> IDENTIFIER . EQUALS expression
    (22) func_call -> IDENTIFIER . LPAREN arguments RPAREN
    (28) ask_stmt -> IDENTIFIER . ASK expression
    (29) ask_stmt -> IDENTIFIER . ASK expression expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    EQUALS          shift and go to state 28
    LPAREN          shift and go to state 29
    ASK             shift and go to state 30
    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 27

state 16

    (17) func_def -> FN . IDENTIFIER LPAREN parameters RPAREN block

    IDENTIFIER      shift and go to state 40


state 17

    (27) show_stmt -> SHOW . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 41

state 18

    (30) if_statement -> IF . expression block elseif_list else_block
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 43

state 19

    (36) loop_statement -> REPEAT . expression block
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 44

state 20

    (37) loop_statement -> LOOP . expression block
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 45

state 21

    (42) class_def -> CLASS . IDENTIFIER block

    IDENTIFIER      shift and go to state 46


state 22

    (40) return_stmt -> RETURN .
    (41) return_stmt -> RETURN . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    FN              reduce using rule 40 (return_stmt -> RETURN .)
    SHOW            reduce using rule 40 (return_stmt -> RETURN .)
    IF              reduce using rule 40 (return_stmt -> RETURN .)
    REPEAT          reduce using rule 40 (return_stmt -> RETURN .)
    LOOP            reduce using rule 40 (return_stmt -> RETURN .)
    CLASS           reduce using rule 40 (return_stmt -> RETURN .)
    RETURN          reduce using rule 40 (return_stmt -> RETURN .)
    STOP            reduce using rule 40 (return_stmt -> RETURN .)
    SKIP            reduce using rule 40 (return_stmt -> RETURN .)
    $end            reduce using rule 40 (return_stmt -> RETURN .)
    RBRACE          reduce using rule 40 (return_stmt -> RETURN .)
    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

  ! IDENTIFIER      [ reduce using rule 40 (return_stmt -> RETURN .) ]

    expression                     shift and go to state 47

state 23

    (38) loop_control -> STOP .

    IDENTIFIER      reduce using rule 38 (loop_control -> STOP .)
    FN              reduce using rule 38 (loop_control -> STOP .)
    SHOW            reduce using rule 38 (loop_control -> STOP .)
    IF              reduce using rule 38 (loop_control -> STOP .)
    REPEAT          reduce using rule 38 (loop_control -> STOP .)
    LOOP            reduce using rule 38 (loop_control -> STOP .)
    CLASS           reduce using rule 38 (loop_control -> STOP .)
    RETURN          reduce using rule 38 (loop_control -> STOP .)
    STOP            reduce using rule 38 (loop_control -> STOP .)
    SKIP            reduce using rule 38 (loop_control -> STOP .)
    $end            reduce using rule 38 (loop_control -> STOP .)
    RBRACE          reduce using rule 38 (loop_control -> STOP .)


state 24

    (39) loop_control -> SKIP .

    IDENTIFIER      reduce using rule 39 (loop_control -> SKIP .)
    FN              reduce using rule 39 (loop_control -> SKIP .)
    SHOW            reduce using rule 39 (loop_control -> SKIP .)
    IF              reduce using rule 39 (loop_control -> SKIP .)
    REPEAT          reduce using rule 39 (loop_control -> SKIP .)
    LOOP            reduce using rule 39 (loop_control -> SKIP .)
    CLASS           reduce using rule 39 (loop_control -> SKIP .)
    RETURN          reduce using rule 39 (loop_control -> SKIP .)
    STOP            reduce using rule 39 (loop_control -> SKIP .)
    SKIP            reduce using rule 39 (loop_control -> SKIP .)
    $end            reduce using rule 39 (loop_control -> SKIP .)
    RBRACE          reduce using rule 39 (loop_control -> SKIP .)


state 25

    (3) statement_list -> statement_list statement .

    IDENTIFIER      reduce using rule 3 (statement_list -> statement_list statement .)
    FN              reduce using rule 3 (statement_list -> statement_list statement .)
    SHOW            reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    REPEAT          reduce using rule 3 (statement_list -> statement_list statement .)
    LOOP            reduce using rule 3 (statement_list -> statement_list statement .)
    CLASS           reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    STOP            reduce using rule 3 (statement_list -> statement_list statement .)
    SKIP            reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement_list statement .)


state 26

    (78) expression -> IDENTIFIER .

    PLUS            reduce using rule 78 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 78 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 78 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 78 (expression -> IDENTIFIER .)
    MOD             reduce using rule 78 (expression -> IDENTIFIER .)
    POWER           reduce using rule 78 (expression -> IDENTIFIER .)
    GT              reduce using rule 78 (expression -> IDENTIFIER .)
    LT              reduce using rule 78 (expression -> IDENTIFIER .)
    GE              reduce using rule 78 (expression -> IDENTIFIER .)
    LE              reduce using rule 78 (expression -> IDENTIFIER .)
    EQEQ            reduce using rule 78 (expression -> IDENTIFIER .)
    NEQ             reduce using rule 78 (expression -> IDENTIFIER .)
    AND             reduce using rule 78 (expression -> IDENTIFIER .)
    OR              reduce using rule 78 (expression -> IDENTIFIER .)
    LBRACKET        reduce using rule 78 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 78 (expression -> IDENTIFIER .)
    FN              reduce using rule 78 (expression -> IDENTIFIER .)
    SHOW            reduce using rule 78 (expression -> IDENTIFIER .)
    IF              reduce using rule 78 (expression -> IDENTIFIER .)
    REPEAT          reduce using rule 78 (expression -> IDENTIFIER .)
    LOOP            reduce using rule 78 (expression -> IDENTIFIER .)
    CLASS           reduce using rule 78 (expression -> IDENTIFIER .)
    RETURN          reduce using rule 78 (expression -> IDENTIFIER .)
    STOP            reduce using rule 78 (expression -> IDENTIFIER .)
    SKIP            reduce using rule 78 (expression -> IDENTIFIER .)
    $end            reduce using rule 78 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 78 (expression -> IDENTIFIER .)
    LBRACE          reduce using rule 78 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 78 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 78 (expression -> IDENTIFIER .)
    NOT             reduce using rule 78 (expression -> IDENTIFIER .)
    LPAREN          reduce using rule 78 (expression -> IDENTIFIER .)
    TO_NUM          reduce using rule 78 (expression -> IDENTIFIER .)
    TO_STR          reduce using rule 78 (expression -> IDENTIFIER .)
    TO_FLOAT        reduce using rule 78 (expression -> IDENTIFIER .)
    NUMBER          reduce using rule 78 (expression -> IDENTIFIER .)
    STRING          reduce using rule 78 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 78 (expression -> IDENTIFIER .)
    COLON           reduce using rule 78 (expression -> IDENTIFIER .)


state 27

    (15) var_decl -> IDENTIFIER expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    IDENTIFIER      reduce using rule 15 (var_decl -> IDENTIFIER expression .)
    FN              reduce using rule 15 (var_decl -> IDENTIFIER expression .)
    SHOW            reduce using rule 15 (var_decl -> IDENTIFIER expression .)
    IF              reduce using rule 15 (var_decl -> IDENTIFIER expression .)
    REPEAT          reduce using rule 15 (var_decl -> IDENTIFIER expression .)
    LOOP            reduce using rule 15 (var_decl -> IDENTIFIER expression .)
    CLASS           reduce using rule 15 (var_decl -> IDENTIFIER expression .)
    RETURN          reduce using rule 15 (var_decl -> IDENTIFIER expression .)
    STOP            reduce using rule 15 (var_decl -> IDENTIFIER expression .)
    SKIP            reduce using rule 15 (var_decl -> IDENTIFIER expression .)
    $end            reduce using rule 15 (var_decl -> IDENTIFIER expression .)
    RBRACE          reduce using rule 15 (var_decl -> IDENTIFIER expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62


state 28

    (16) var_assign -> IDENTIFIER EQUALS . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 63

state 29

    (22) func_call -> IDENTIFIER LPAREN . arguments RPAREN
    (60) expression -> LPAREN . expression RPAREN
    (23) arguments -> . argument_list
    (24) arguments -> . empty
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER
    (25) argument_list -> . expression
    (26) argument_list -> . argument_list COMMA expression
    (79) empty -> .

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26
    RPAREN          reduce using rule 79 (empty -> .)

    arguments                      shift and go to state 64
    expression                     shift and go to state 65
    argument_list                  shift and go to state 66
    empty                          shift and go to state 67

state 30

    (28) ask_stmt -> IDENTIFIER ASK . expression
    (29) ask_stmt -> IDENTIFIER ASK . expression expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 68

state 31

    (59) expression -> MINUS . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 69

state 32

    (58) expression -> NOT . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 70

state 33

    (61) expression -> TO_NUM . LPAREN expression RPAREN

    LPAREN          shift and go to state 71


state 34

    (62) expression -> TO_STR . LPAREN expression RPAREN

    LPAREN          shift and go to state 72


state 35

    (63) expression -> TO_FLOAT . LPAREN expression RPAREN

    LPAREN          shift and go to state 73


state 36

    (64) expression -> LBRACKET . array_items RBRACKET
    (65) array_items -> . expression_list
    (66) array_items -> . empty
    (67) expression_list -> . expression
    (68) expression_list -> . expression_list COMMA expression
    (79) empty -> .
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    RBRACKET        reduce using rule 79 (empty -> .)
    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    array_items                    shift and go to state 74
    expression_list                shift and go to state 75
    empty                          shift and go to state 76
    expression                     shift and go to state 77

state 37

    (70) expression -> LBRACE . dict_items RBRACE
    (71) dict_items -> . dict_item_list
    (72) dict_items -> . empty
    (73) dict_item_list -> . dict_item
    (74) dict_item_list -> . dict_item_list COMMA dict_item
    (79) empty -> .
    (75) dict_item -> . expression COLON expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    RBRACE          reduce using rule 79 (empty -> .)
    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    dict_items                     shift and go to state 78
    dict_item_list                 shift and go to state 79
    empty                          shift and go to state 80
    dict_item                      shift and go to state 81
    expression                     shift and go to state 82

state 38

    (76) expression -> NUMBER .

    PLUS            reduce using rule 76 (expression -> NUMBER .)
    MINUS           reduce using rule 76 (expression -> NUMBER .)
    TIMES           reduce using rule 76 (expression -> NUMBER .)
    DIVIDE          reduce using rule 76 (expression -> NUMBER .)
    MOD             reduce using rule 76 (expression -> NUMBER .)
    POWER           reduce using rule 76 (expression -> NUMBER .)
    GT              reduce using rule 76 (expression -> NUMBER .)
    LT              reduce using rule 76 (expression -> NUMBER .)
    GE              reduce using rule 76 (expression -> NUMBER .)
    LE              reduce using rule 76 (expression -> NUMBER .)
    EQEQ            reduce using rule 76 (expression -> NUMBER .)
    NEQ             reduce using rule 76 (expression -> NUMBER .)
    AND             reduce using rule 76 (expression -> NUMBER .)
    OR              reduce using rule 76 (expression -> NUMBER .)
    LBRACKET        reduce using rule 76 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 76 (expression -> NUMBER .)
    FN              reduce using rule 76 (expression -> NUMBER .)
    SHOW            reduce using rule 76 (expression -> NUMBER .)
    IF              reduce using rule 76 (expression -> NUMBER .)
    REPEAT          reduce using rule 76 (expression -> NUMBER .)
    LOOP            reduce using rule 76 (expression -> NUMBER .)
    CLASS           reduce using rule 76 (expression -> NUMBER .)
    RETURN          reduce using rule 76 (expression -> NUMBER .)
    STOP            reduce using rule 76 (expression -> NUMBER .)
    SKIP            reduce using rule 76 (expression -> NUMBER .)
    $end            reduce using rule 76 (expression -> NUMBER .)
    RBRACE          reduce using rule 76 (expression -> NUMBER .)
    LBRACE          reduce using rule 76 (expression -> NUMBER .)
    RPAREN          reduce using rule 76 (expression -> NUMBER .)
    COMMA           reduce using rule 76 (expression -> NUMBER .)
    NOT             reduce using rule 76 (expression -> NUMBER .)
    LPAREN          reduce using rule 76 (expression -> NUMBER .)
    TO_NUM          reduce using rule 76 (expression -> NUMBER .)
    TO_STR          reduce using rule 76 (expression -> NUMBER .)
    TO_FLOAT        reduce using rule 76 (expression -> NUMBER .)
    NUMBER          reduce using rule 76 (expression -> NUMBER .)
    STRING          reduce using rule 76 (expression -> NUMBER .)
    RBRACKET        reduce using rule 76 (expression -> NUMBER .)
    COLON           reduce using rule 76 (expression -> NUMBER .)


state 39

    (77) expression -> STRING .

    PLUS            reduce using rule 77 (expression -> STRING .)
    MINUS           reduce using rule 77 (expression -> STRING .)
    TIMES           reduce using rule 77 (expression -> STRING .)
    DIVIDE          reduce using rule 77 (expression -> STRING .)
    MOD             reduce using rule 77 (expression -> STRING .)
    POWER           reduce using rule 77 (expression -> STRING .)
    GT              reduce using rule 77 (expression -> STRING .)
    LT              reduce using rule 77 (expression -> STRING .)
    GE              reduce using rule 77 (expression -> STRING .)
    LE              reduce using rule 77 (expression -> STRING .)
    EQEQ            reduce using rule 77 (expression -> STRING .)
    NEQ             reduce using rule 77 (expression -> STRING .)
    AND             reduce using rule 77 (expression -> STRING .)
    OR              reduce using rule 77 (expression -> STRING .)
    LBRACKET        reduce using rule 77 (expression -> STRING .)
    IDENTIFIER      reduce using rule 77 (expression -> STRING .)
    FN              reduce using rule 77 (expression -> STRING .)
    SHOW            reduce using rule 77 (expression -> STRING .)
    IF              reduce using rule 77 (expression -> STRING .)
    REPEAT          reduce using rule 77 (expression -> STRING .)
    LOOP            reduce using rule 77 (expression -> STRING .)
    CLASS           reduce using rule 77 (expression -> STRING .)
    RETURN          reduce using rule 77 (expression -> STRING .)
    STOP            reduce using rule 77 (expression -> STRING .)
    SKIP            reduce using rule 77 (expression -> STRING .)
    $end            reduce using rule 77 (expression -> STRING .)
    RBRACE          reduce using rule 77 (expression -> STRING .)
    LBRACE          reduce using rule 77 (expression -> STRING .)
    RPAREN          reduce using rule 77 (expression -> STRING .)
    COMMA           reduce using rule 77 (expression -> STRING .)
    NOT             reduce using rule 77 (expression -> STRING .)
    LPAREN          reduce using rule 77 (expression -> STRING .)
    TO_NUM          reduce using rule 77 (expression -> STRING .)
    TO_STR          reduce using rule 77 (expression -> STRING .)
    TO_FLOAT        reduce using rule 77 (expression -> STRING .)
    NUMBER          reduce using rule 77 (expression -> STRING .)
    STRING          reduce using rule 77 (expression -> STRING .)
    RBRACKET        reduce using rule 77 (expression -> STRING .)
    COLON           reduce using rule 77 (expression -> STRING .)


state 40

    (17) func_def -> FN IDENTIFIER . LPAREN parameters RPAREN block

    LPAREN          shift and go to state 83


state 41

    (27) show_stmt -> SHOW expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    IDENTIFIER      reduce using rule 27 (show_stmt -> SHOW expression .)
    FN              reduce using rule 27 (show_stmt -> SHOW expression .)
    SHOW            reduce using rule 27 (show_stmt -> SHOW expression .)
    IF              reduce using rule 27 (show_stmt -> SHOW expression .)
    REPEAT          reduce using rule 27 (show_stmt -> SHOW expression .)
    LOOP            reduce using rule 27 (show_stmt -> SHOW expression .)
    CLASS           reduce using rule 27 (show_stmt -> SHOW expression .)
    RETURN          reduce using rule 27 (show_stmt -> SHOW expression .)
    STOP            reduce using rule 27 (show_stmt -> SHOW expression .)
    SKIP            reduce using rule 27 (show_stmt -> SHOW expression .)
    $end            reduce using rule 27 (show_stmt -> SHOW expression .)
    RBRACE          reduce using rule 27 (show_stmt -> SHOW expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62


state 42

    (60) expression -> LPAREN . expression RPAREN
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 84

state 43

    (30) if_statement -> IF expression . block elseif_list else_block
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET
    (43) block -> . LBRACE statement_list RBRACE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 86

    block                          shift and go to state 85

state 44

    (36) loop_statement -> REPEAT expression . block
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET
    (43) block -> . LBRACE statement_list RBRACE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 86

    block                          shift and go to state 87

state 45

    (37) loop_statement -> LOOP expression . block
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET
    (43) block -> . LBRACE statement_list RBRACE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 86

    block                          shift and go to state 88

state 46

    (42) class_def -> CLASS IDENTIFIER . block
    (43) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 86

    block                          shift and go to state 89

state 47

    (41) return_stmt -> RETURN expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    IDENTIFIER      reduce using rule 41 (return_stmt -> RETURN expression .)
    FN              reduce using rule 41 (return_stmt -> RETURN expression .)
    SHOW            reduce using rule 41 (return_stmt -> RETURN expression .)
    IF              reduce using rule 41 (return_stmt -> RETURN expression .)
    REPEAT          reduce using rule 41 (return_stmt -> RETURN expression .)
    LOOP            reduce using rule 41 (return_stmt -> RETURN expression .)
    CLASS           reduce using rule 41 (return_stmt -> RETURN expression .)
    RETURN          reduce using rule 41 (return_stmt -> RETURN expression .)
    STOP            reduce using rule 41 (return_stmt -> RETURN expression .)
    SKIP            reduce using rule 41 (return_stmt -> RETURN expression .)
    $end            reduce using rule 41 (return_stmt -> RETURN expression .)
    RBRACE          reduce using rule 41 (return_stmt -> RETURN expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62


state 48

    (44) expression -> expression PLUS . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 90

state 49

    (45) expression -> expression MINUS . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 91

state 50

    (46) expression -> expression TIMES . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 92

state 51

    (47) expression -> expression DIVIDE . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 93

state 52

    (48) expression -> expression MOD . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 94

state 53

    (49) expression -> expression POWER . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 95

state 54

    (50) expression -> expression GT . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 96

state 55

    (51) expression -> expression LT . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 97

state 56

    (52) expression -> expression GE . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 98

state 57

    (53) expression -> expression LE . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 99

state 58

    (54) expression -> expression EQEQ . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 100

state 59

    (55) expression -> expression NEQ . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 101

state 60

    (56) expression -> expression AND . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 102

state 61

    (57) expression -> expression OR . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 103

state 62

    (69) expression -> expression LBRACKET . expression RBRACKET
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 104

state 63

    (16) var_assign -> IDENTIFIER EQUALS expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    IDENTIFIER      reduce using rule 16 (var_assign -> IDENTIFIER EQUALS expression .)
    FN              reduce using rule 16 (var_assign -> IDENTIFIER EQUALS expression .)
    SHOW            reduce using rule 16 (var_assign -> IDENTIFIER EQUALS expression .)
    IF              reduce using rule 16 (var_assign -> IDENTIFIER EQUALS expression .)
    REPEAT          reduce using rule 16 (var_assign -> IDENTIFIER EQUALS expression .)
    LOOP            reduce using rule 16 (var_assign -> IDENTIFIER EQUALS expression .)
    CLASS           reduce using rule 16 (var_assign -> IDENTIFIER EQUALS expression .)
    RETURN          reduce using rule 16 (var_assign -> IDENTIFIER EQUALS expression .)
    STOP            reduce using rule 16 (var_assign -> IDENTIFIER EQUALS expression .)
    SKIP            reduce using rule 16 (var_assign -> IDENTIFIER EQUALS expression .)
    $end            reduce using rule 16 (var_assign -> IDENTIFIER EQUALS expression .)
    RBRACE          reduce using rule 16 (var_assign -> IDENTIFIER EQUALS expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62


state 64

    (22) func_call -> IDENTIFIER LPAREN arguments . RPAREN

    RPAREN          shift and go to state 105


state 65

    (60) expression -> LPAREN expression . RPAREN
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET
    (25) argument_list -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 106
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62
    COMMA           reduce using rule 25 (argument_list -> expression .)

  ! RPAREN          [ reduce using rule 25 (argument_list -> expression .) ]


state 66

    (23) arguments -> argument_list .
    (26) argument_list -> argument_list . COMMA expression

    RPAREN          reduce using rule 23 (arguments -> argument_list .)
    COMMA           shift and go to state 107


state 67

    (24) arguments -> empty .

    RPAREN          reduce using rule 24 (arguments -> empty .)


state 68

    (28) ask_stmt -> IDENTIFIER ASK expression .
    (29) ask_stmt -> IDENTIFIER ASK expression . expression
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    FN              reduce using rule 28 (ask_stmt -> IDENTIFIER ASK expression .)
    SHOW            reduce using rule 28 (ask_stmt -> IDENTIFIER ASK expression .)
    IF              reduce using rule 28 (ask_stmt -> IDENTIFIER ASK expression .)
    REPEAT          reduce using rule 28 (ask_stmt -> IDENTIFIER ASK expression .)
    LOOP            reduce using rule 28 (ask_stmt -> IDENTIFIER ASK expression .)
    CLASS           reduce using rule 28 (ask_stmt -> IDENTIFIER ASK expression .)
    RETURN          reduce using rule 28 (ask_stmt -> IDENTIFIER ASK expression .)
    STOP            reduce using rule 28 (ask_stmt -> IDENTIFIER ASK expression .)
    SKIP            reduce using rule 28 (ask_stmt -> IDENTIFIER ASK expression .)
    $end            reduce using rule 28 (ask_stmt -> IDENTIFIER ASK expression .)
    RBRACE          reduce using rule 28 (ask_stmt -> IDENTIFIER ASK expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 109
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 110
    NOT             shift and go to state 32
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

  ! IDENTIFIER      [ reduce using rule 28 (ask_stmt -> IDENTIFIER ASK expression .) ]

    expression                     shift and go to state 108

state 69

    (59) expression -> MINUS expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    PLUS            reduce using rule 59 (expression -> MINUS expression .)
    MINUS           reduce using rule 59 (expression -> MINUS expression .)
    TIMES           reduce using rule 59 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 59 (expression -> MINUS expression .)
    MOD             reduce using rule 59 (expression -> MINUS expression .)
    POWER           reduce using rule 59 (expression -> MINUS expression .)
    GT              reduce using rule 59 (expression -> MINUS expression .)
    LT              reduce using rule 59 (expression -> MINUS expression .)
    GE              reduce using rule 59 (expression -> MINUS expression .)
    LE              reduce using rule 59 (expression -> MINUS expression .)
    EQEQ            reduce using rule 59 (expression -> MINUS expression .)
    NEQ             reduce using rule 59 (expression -> MINUS expression .)
    AND             reduce using rule 59 (expression -> MINUS expression .)
    OR              reduce using rule 59 (expression -> MINUS expression .)
    LBRACKET        reduce using rule 59 (expression -> MINUS expression .)
    IDENTIFIER      reduce using rule 59 (expression -> MINUS expression .)
    FN              reduce using rule 59 (expression -> MINUS expression .)
    SHOW            reduce using rule 59 (expression -> MINUS expression .)
    IF              reduce using rule 59 (expression -> MINUS expression .)
    REPEAT          reduce using rule 59 (expression -> MINUS expression .)
    LOOP            reduce using rule 59 (expression -> MINUS expression .)
    CLASS           reduce using rule 59 (expression -> MINUS expression .)
    RETURN          reduce using rule 59 (expression -> MINUS expression .)
    STOP            reduce using rule 59 (expression -> MINUS expression .)
    SKIP            reduce using rule 59 (expression -> MINUS expression .)
    $end            reduce using rule 59 (expression -> MINUS expression .)
    RBRACE          reduce using rule 59 (expression -> MINUS expression .)
    LBRACE          reduce using rule 59 (expression -> MINUS expression .)
    RPAREN          reduce using rule 59 (expression -> MINUS expression .)
    COMMA           reduce using rule 59 (expression -> MINUS expression .)
    NOT             reduce using rule 59 (expression -> MINUS expression .)
    LPAREN          reduce using rule 59 (expression -> MINUS expression .)
    TO_NUM          reduce using rule 59 (expression -> MINUS expression .)
    TO_STR          reduce using rule 59 (expression -> MINUS expression .)
    TO_FLOAT        reduce using rule 59 (expression -> MINUS expression .)
    NUMBER          reduce using rule 59 (expression -> MINUS expression .)
    STRING          reduce using rule 59 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 59 (expression -> MINUS expression .)
    COLON           reduce using rule 59 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MOD             [ shift and go to state 52 ]
  ! POWER           [ shift and go to state 53 ]
  ! GT              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! LE              [ shift and go to state 57 ]
  ! EQEQ            [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 70

    (58) expression -> NOT expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    PLUS            reduce using rule 58 (expression -> NOT expression .)
    MINUS           reduce using rule 58 (expression -> NOT expression .)
    TIMES           reduce using rule 58 (expression -> NOT expression .)
    DIVIDE          reduce using rule 58 (expression -> NOT expression .)
    MOD             reduce using rule 58 (expression -> NOT expression .)
    POWER           reduce using rule 58 (expression -> NOT expression .)
    GT              reduce using rule 58 (expression -> NOT expression .)
    LT              reduce using rule 58 (expression -> NOT expression .)
    GE              reduce using rule 58 (expression -> NOT expression .)
    LE              reduce using rule 58 (expression -> NOT expression .)
    EQEQ            reduce using rule 58 (expression -> NOT expression .)
    NEQ             reduce using rule 58 (expression -> NOT expression .)
    AND             reduce using rule 58 (expression -> NOT expression .)
    OR              reduce using rule 58 (expression -> NOT expression .)
    LBRACKET        reduce using rule 58 (expression -> NOT expression .)
    IDENTIFIER      reduce using rule 58 (expression -> NOT expression .)
    FN              reduce using rule 58 (expression -> NOT expression .)
    SHOW            reduce using rule 58 (expression -> NOT expression .)
    IF              reduce using rule 58 (expression -> NOT expression .)
    REPEAT          reduce using rule 58 (expression -> NOT expression .)
    LOOP            reduce using rule 58 (expression -> NOT expression .)
    CLASS           reduce using rule 58 (expression -> NOT expression .)
    RETURN          reduce using rule 58 (expression -> NOT expression .)
    STOP            reduce using rule 58 (expression -> NOT expression .)
    SKIP            reduce using rule 58 (expression -> NOT expression .)
    $end            reduce using rule 58 (expression -> NOT expression .)
    RBRACE          reduce using rule 58 (expression -> NOT expression .)
    LBRACE          reduce using rule 58 (expression -> NOT expression .)
    RPAREN          reduce using rule 58 (expression -> NOT expression .)
    COMMA           reduce using rule 58 (expression -> NOT expression .)
    NOT             reduce using rule 58 (expression -> NOT expression .)
    LPAREN          reduce using rule 58 (expression -> NOT expression .)
    TO_NUM          reduce using rule 58 (expression -> NOT expression .)
    TO_STR          reduce using rule 58 (expression -> NOT expression .)
    TO_FLOAT        reduce using rule 58 (expression -> NOT expression .)
    NUMBER          reduce using rule 58 (expression -> NOT expression .)
    STRING          reduce using rule 58 (expression -> NOT expression .)
    RBRACKET        reduce using rule 58 (expression -> NOT expression .)
    COLON           reduce using rule 58 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MOD             [ shift and go to state 52 ]
  ! POWER           [ shift and go to state 53 ]
  ! GT              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! LE              [ shift and go to state 57 ]
  ! EQEQ            [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 71

    (61) expression -> TO_NUM LPAREN . expression RPAREN
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 111

state 72

    (62) expression -> TO_STR LPAREN . expression RPAREN
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 112

state 73

    (63) expression -> TO_FLOAT LPAREN . expression RPAREN
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 113

state 74

    (64) expression -> LBRACKET array_items . RBRACKET

    RBRACKET        shift and go to state 114


state 75

    (65) array_items -> expression_list .
    (68) expression_list -> expression_list . COMMA expression

    RBRACKET        reduce using rule 65 (array_items -> expression_list .)
    COMMA           shift and go to state 115


state 76

    (66) array_items -> empty .

    RBRACKET        reduce using rule 66 (array_items -> empty .)


state 77

    (67) expression_list -> expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    COMMA           reduce using rule 67 (expression_list -> expression .)
    RBRACKET        reduce using rule 67 (expression_list -> expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62


state 78

    (70) expression -> LBRACE dict_items . RBRACE

    RBRACE          shift and go to state 116


state 79

    (71) dict_items -> dict_item_list .
    (74) dict_item_list -> dict_item_list . COMMA dict_item

    RBRACE          reduce using rule 71 (dict_items -> dict_item_list .)
    COMMA           shift and go to state 117


state 80

    (72) dict_items -> empty .

    RBRACE          reduce using rule 72 (dict_items -> empty .)


state 81

    (73) dict_item_list -> dict_item .

    COMMA           reduce using rule 73 (dict_item_list -> dict_item .)
    RBRACE          reduce using rule 73 (dict_item_list -> dict_item .)


state 82

    (75) dict_item -> expression . COLON expression
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    COLON           shift and go to state 118
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62


state 83

    (17) func_def -> FN IDENTIFIER LPAREN . parameters RPAREN block
    (18) parameters -> . parameter_list
    (19) parameters -> . empty
    (20) parameter_list -> . IDENTIFIER
    (21) parameter_list -> . parameter_list COMMA IDENTIFIER
    (79) empty -> .

    IDENTIFIER      shift and go to state 119
    RPAREN          reduce using rule 79 (empty -> .)

    parameters                     shift and go to state 120
    parameter_list                 shift and go to state 121
    empty                          shift and go to state 122

state 84

    (60) expression -> LPAREN expression . RPAREN
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    RPAREN          shift and go to state 106
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62


state 85

    (30) if_statement -> IF expression block . elseif_list else_block
    (31) elseif_list -> . elseif_list elseif
    (32) elseif_list -> . empty
    (79) empty -> .

    ELSE            reduce using rule 79 (empty -> .)
    ELSEIF          reduce using rule 79 (empty -> .)
    IDENTIFIER      reduce using rule 79 (empty -> .)
    FN              reduce using rule 79 (empty -> .)
    SHOW            reduce using rule 79 (empty -> .)
    IF              reduce using rule 79 (empty -> .)
    REPEAT          reduce using rule 79 (empty -> .)
    LOOP            reduce using rule 79 (empty -> .)
    CLASS           reduce using rule 79 (empty -> .)
    RETURN          reduce using rule 79 (empty -> .)
    STOP            reduce using rule 79 (empty -> .)
    SKIP            reduce using rule 79 (empty -> .)
    $end            reduce using rule 79 (empty -> .)
    RBRACE          reduce using rule 79 (empty -> .)

    elseif_list                    shift and go to state 123
    empty                          shift and go to state 124

state 86

    (43) block -> LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . var_decl
    (5) statement -> . var_assign
    (6) statement -> . func_def
    (7) statement -> . func_call
    (8) statement -> . show_stmt
    (9) statement -> . ask_stmt
    (10) statement -> . if_statement
    (11) statement -> . loop_statement
    (12) statement -> . class_def
    (13) statement -> . return_stmt
    (14) statement -> . loop_control
    (15) var_decl -> . IDENTIFIER expression
    (16) var_assign -> . IDENTIFIER EQUALS expression
    (17) func_def -> . FN IDENTIFIER LPAREN parameters RPAREN block
    (22) func_call -> . IDENTIFIER LPAREN arguments RPAREN
    (27) show_stmt -> . SHOW expression
    (28) ask_stmt -> . IDENTIFIER ASK expression
    (29) ask_stmt -> . IDENTIFIER ASK expression expression
    (30) if_statement -> . IF expression block elseif_list else_block
    (36) loop_statement -> . REPEAT expression block
    (37) loop_statement -> . LOOP expression block
    (42) class_def -> . CLASS IDENTIFIER block
    (40) return_stmt -> . RETURN
    (41) return_stmt -> . RETURN expression
    (38) loop_control -> . STOP
    (39) loop_control -> . SKIP

    IDENTIFIER      shift and go to state 15
    FN              shift and go to state 16
    SHOW            shift and go to state 17
    IF              shift and go to state 18
    REPEAT          shift and go to state 19
    LOOP            shift and go to state 20
    CLASS           shift and go to state 21
    RETURN          shift and go to state 22
    STOP            shift and go to state 23
    SKIP            shift and go to state 24

    statement_list                 shift and go to state 125
    statement                      shift and go to state 3
    var_decl                       shift and go to state 4
    var_assign                     shift and go to state 5
    func_def                       shift and go to state 6
    func_call                      shift and go to state 7
    show_stmt                      shift and go to state 8
    ask_stmt                       shift and go to state 9
    if_statement                   shift and go to state 10
    loop_statement                 shift and go to state 11
    class_def                      shift and go to state 12
    return_stmt                    shift and go to state 13
    loop_control                   shift and go to state 14

state 87

    (36) loop_statement -> REPEAT expression block .

    IDENTIFIER      reduce using rule 36 (loop_statement -> REPEAT expression block .)
    FN              reduce using rule 36 (loop_statement -> REPEAT expression block .)
    SHOW            reduce using rule 36 (loop_statement -> REPEAT expression block .)
    IF              reduce using rule 36 (loop_statement -> REPEAT expression block .)
    REPEAT          reduce using rule 36 (loop_statement -> REPEAT expression block .)
    LOOP            reduce using rule 36 (loop_statement -> REPEAT expression block .)
    CLASS           reduce using rule 36 (loop_statement -> REPEAT expression block .)
    RETURN          reduce using rule 36 (loop_statement -> REPEAT expression block .)
    STOP            reduce using rule 36 (loop_statement -> REPEAT expression block .)
    SKIP            reduce using rule 36 (loop_statement -> REPEAT expression block .)
    $end            reduce using rule 36 (loop_statement -> REPEAT expression block .)
    RBRACE          reduce using rule 36 (loop_statement -> REPEAT expression block .)


state 88

    (37) loop_statement -> LOOP expression block .

    IDENTIFIER      reduce using rule 37 (loop_statement -> LOOP expression block .)
    FN              reduce using rule 37 (loop_statement -> LOOP expression block .)
    SHOW            reduce using rule 37 (loop_statement -> LOOP expression block .)
    IF              reduce using rule 37 (loop_statement -> LOOP expression block .)
    REPEAT          reduce using rule 37 (loop_statement -> LOOP expression block .)
    LOOP            reduce using rule 37 (loop_statement -> LOOP expression block .)
    CLASS           reduce using rule 37 (loop_statement -> LOOP expression block .)
    RETURN          reduce using rule 37 (loop_statement -> LOOP expression block .)
    STOP            reduce using rule 37 (loop_statement -> LOOP expression block .)
    SKIP            reduce using rule 37 (loop_statement -> LOOP expression block .)
    $end            reduce using rule 37 (loop_statement -> LOOP expression block .)
    RBRACE          reduce using rule 37 (loop_statement -> LOOP expression block .)


state 89

    (42) class_def -> CLASS IDENTIFIER block .

    IDENTIFIER      reduce using rule 42 (class_def -> CLASS IDENTIFIER block .)
    FN              reduce using rule 42 (class_def -> CLASS IDENTIFIER block .)
    SHOW            reduce using rule 42 (class_def -> CLASS IDENTIFIER block .)
    IF              reduce using rule 42 (class_def -> CLASS IDENTIFIER block .)
    REPEAT          reduce using rule 42 (class_def -> CLASS IDENTIFIER block .)
    LOOP            reduce using rule 42 (class_def -> CLASS IDENTIFIER block .)
    CLASS           reduce using rule 42 (class_def -> CLASS IDENTIFIER block .)
    RETURN          reduce using rule 42 (class_def -> CLASS IDENTIFIER block .)
    STOP            reduce using rule 42 (class_def -> CLASS IDENTIFIER block .)
    SKIP            reduce using rule 42 (class_def -> CLASS IDENTIFIER block .)
    $end            reduce using rule 42 (class_def -> CLASS IDENTIFIER block .)
    RBRACE          reduce using rule 42 (class_def -> CLASS IDENTIFIER block .)


state 90

    (44) expression -> expression PLUS expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    PLUS            reduce using rule 44 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 44 (expression -> expression PLUS expression .)
    GT              reduce using rule 44 (expression -> expression PLUS expression .)
    LT              reduce using rule 44 (expression -> expression PLUS expression .)
    GE              reduce using rule 44 (expression -> expression PLUS expression .)
    LE              reduce using rule 44 (expression -> expression PLUS expression .)
    EQEQ            reduce using rule 44 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 44 (expression -> expression PLUS expression .)
    AND             reduce using rule 44 (expression -> expression PLUS expression .)
    OR              reduce using rule 44 (expression -> expression PLUS expression .)
    LBRACKET        reduce using rule 44 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 44 (expression -> expression PLUS expression .)
    FN              reduce using rule 44 (expression -> expression PLUS expression .)
    SHOW            reduce using rule 44 (expression -> expression PLUS expression .)
    IF              reduce using rule 44 (expression -> expression PLUS expression .)
    REPEAT          reduce using rule 44 (expression -> expression PLUS expression .)
    LOOP            reduce using rule 44 (expression -> expression PLUS expression .)
    CLASS           reduce using rule 44 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 44 (expression -> expression PLUS expression .)
    STOP            reduce using rule 44 (expression -> expression PLUS expression .)
    SKIP            reduce using rule 44 (expression -> expression PLUS expression .)
    $end            reduce using rule 44 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 44 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 44 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 44 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 44 (expression -> expression PLUS expression .)
    NOT             reduce using rule 44 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 44 (expression -> expression PLUS expression .)
    TO_NUM          reduce using rule 44 (expression -> expression PLUS expression .)
    TO_STR          reduce using rule 44 (expression -> expression PLUS expression .)
    TO_FLOAT        reduce using rule 44 (expression -> expression PLUS expression .)
    NUMBER          reduce using rule 44 (expression -> expression PLUS expression .)
    STRING          reduce using rule 44 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 44 (expression -> expression PLUS expression .)
    COLON           reduce using rule 44 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53

  ! TIMES           [ reduce using rule 44 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 44 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 44 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! GT              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! LE              [ shift and go to state 57 ]
  ! EQEQ            [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 91

    (45) expression -> expression MINUS expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    PLUS            reduce using rule 45 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 45 (expression -> expression MINUS expression .)
    GT              reduce using rule 45 (expression -> expression MINUS expression .)
    LT              reduce using rule 45 (expression -> expression MINUS expression .)
    GE              reduce using rule 45 (expression -> expression MINUS expression .)
    LE              reduce using rule 45 (expression -> expression MINUS expression .)
    EQEQ            reduce using rule 45 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 45 (expression -> expression MINUS expression .)
    AND             reduce using rule 45 (expression -> expression MINUS expression .)
    OR              reduce using rule 45 (expression -> expression MINUS expression .)
    LBRACKET        reduce using rule 45 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 45 (expression -> expression MINUS expression .)
    FN              reduce using rule 45 (expression -> expression MINUS expression .)
    SHOW            reduce using rule 45 (expression -> expression MINUS expression .)
    IF              reduce using rule 45 (expression -> expression MINUS expression .)
    REPEAT          reduce using rule 45 (expression -> expression MINUS expression .)
    LOOP            reduce using rule 45 (expression -> expression MINUS expression .)
    CLASS           reduce using rule 45 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 45 (expression -> expression MINUS expression .)
    STOP            reduce using rule 45 (expression -> expression MINUS expression .)
    SKIP            reduce using rule 45 (expression -> expression MINUS expression .)
    $end            reduce using rule 45 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 45 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 45 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 45 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 45 (expression -> expression MINUS expression .)
    NOT             reduce using rule 45 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 45 (expression -> expression MINUS expression .)
    TO_NUM          reduce using rule 45 (expression -> expression MINUS expression .)
    TO_STR          reduce using rule 45 (expression -> expression MINUS expression .)
    TO_FLOAT        reduce using rule 45 (expression -> expression MINUS expression .)
    NUMBER          reduce using rule 45 (expression -> expression MINUS expression .)
    STRING          reduce using rule 45 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 45 (expression -> expression MINUS expression .)
    COLON           reduce using rule 45 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53

  ! TIMES           [ reduce using rule 45 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 45 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 45 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! GT              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! LE              [ shift and go to state 57 ]
  ! EQEQ            [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 92

    (46) expression -> expression TIMES expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    PLUS            reduce using rule 46 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 46 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 46 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 46 (expression -> expression TIMES expression .)
    MOD             reduce using rule 46 (expression -> expression TIMES expression .)
    GT              reduce using rule 46 (expression -> expression TIMES expression .)
    LT              reduce using rule 46 (expression -> expression TIMES expression .)
    GE              reduce using rule 46 (expression -> expression TIMES expression .)
    LE              reduce using rule 46 (expression -> expression TIMES expression .)
    EQEQ            reduce using rule 46 (expression -> expression TIMES expression .)
    NEQ             reduce using rule 46 (expression -> expression TIMES expression .)
    AND             reduce using rule 46 (expression -> expression TIMES expression .)
    OR              reduce using rule 46 (expression -> expression TIMES expression .)
    LBRACKET        reduce using rule 46 (expression -> expression TIMES expression .)
    IDENTIFIER      reduce using rule 46 (expression -> expression TIMES expression .)
    FN              reduce using rule 46 (expression -> expression TIMES expression .)
    SHOW            reduce using rule 46 (expression -> expression TIMES expression .)
    IF              reduce using rule 46 (expression -> expression TIMES expression .)
    REPEAT          reduce using rule 46 (expression -> expression TIMES expression .)
    LOOP            reduce using rule 46 (expression -> expression TIMES expression .)
    CLASS           reduce using rule 46 (expression -> expression TIMES expression .)
    RETURN          reduce using rule 46 (expression -> expression TIMES expression .)
    STOP            reduce using rule 46 (expression -> expression TIMES expression .)
    SKIP            reduce using rule 46 (expression -> expression TIMES expression .)
    $end            reduce using rule 46 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 46 (expression -> expression TIMES expression .)
    LBRACE          reduce using rule 46 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 46 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 46 (expression -> expression TIMES expression .)
    NOT             reduce using rule 46 (expression -> expression TIMES expression .)
    LPAREN          reduce using rule 46 (expression -> expression TIMES expression .)
    TO_NUM          reduce using rule 46 (expression -> expression TIMES expression .)
    TO_STR          reduce using rule 46 (expression -> expression TIMES expression .)
    TO_FLOAT        reduce using rule 46 (expression -> expression TIMES expression .)
    NUMBER          reduce using rule 46 (expression -> expression TIMES expression .)
    STRING          reduce using rule 46 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 46 (expression -> expression TIMES expression .)
    COLON           reduce using rule 46 (expression -> expression TIMES expression .)
    POWER           shift and go to state 53

  ! POWER           [ reduce using rule 46 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MOD             [ shift and go to state 52 ]
  ! GT              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! LE              [ shift and go to state 57 ]
  ! EQEQ            [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 93

    (47) expression -> expression DIVIDE expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    PLUS            reduce using rule 47 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 47 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 47 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 47 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 47 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 47 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 47 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 47 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 47 (expression -> expression DIVIDE expression .)
    EQEQ            reduce using rule 47 (expression -> expression DIVIDE expression .)
    NEQ             reduce using rule 47 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 47 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 47 (expression -> expression DIVIDE expression .)
    LBRACKET        reduce using rule 47 (expression -> expression DIVIDE expression .)
    IDENTIFIER      reduce using rule 47 (expression -> expression DIVIDE expression .)
    FN              reduce using rule 47 (expression -> expression DIVIDE expression .)
    SHOW            reduce using rule 47 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 47 (expression -> expression DIVIDE expression .)
    REPEAT          reduce using rule 47 (expression -> expression DIVIDE expression .)
    LOOP            reduce using rule 47 (expression -> expression DIVIDE expression .)
    CLASS           reduce using rule 47 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 47 (expression -> expression DIVIDE expression .)
    STOP            reduce using rule 47 (expression -> expression DIVIDE expression .)
    SKIP            reduce using rule 47 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 47 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 47 (expression -> expression DIVIDE expression .)
    LBRACE          reduce using rule 47 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 47 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 47 (expression -> expression DIVIDE expression .)
    NOT             reduce using rule 47 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 47 (expression -> expression DIVIDE expression .)
    TO_NUM          reduce using rule 47 (expression -> expression DIVIDE expression .)
    TO_STR          reduce using rule 47 (expression -> expression DIVIDE expression .)
    TO_FLOAT        reduce using rule 47 (expression -> expression DIVIDE expression .)
    NUMBER          reduce using rule 47 (expression -> expression DIVIDE expression .)
    STRING          reduce using rule 47 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 47 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 47 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 53

  ! POWER           [ reduce using rule 47 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MOD             [ shift and go to state 52 ]
  ! GT              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! LE              [ shift and go to state 57 ]
  ! EQEQ            [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 94

    (48) expression -> expression MOD expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    PLUS            reduce using rule 48 (expression -> expression MOD expression .)
    MINUS           reduce using rule 48 (expression -> expression MOD expression .)
    TIMES           reduce using rule 48 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 48 (expression -> expression MOD expression .)
    MOD             reduce using rule 48 (expression -> expression MOD expression .)
    GT              reduce using rule 48 (expression -> expression MOD expression .)
    LT              reduce using rule 48 (expression -> expression MOD expression .)
    GE              reduce using rule 48 (expression -> expression MOD expression .)
    LE              reduce using rule 48 (expression -> expression MOD expression .)
    EQEQ            reduce using rule 48 (expression -> expression MOD expression .)
    NEQ             reduce using rule 48 (expression -> expression MOD expression .)
    AND             reduce using rule 48 (expression -> expression MOD expression .)
    OR              reduce using rule 48 (expression -> expression MOD expression .)
    LBRACKET        reduce using rule 48 (expression -> expression MOD expression .)
    IDENTIFIER      reduce using rule 48 (expression -> expression MOD expression .)
    FN              reduce using rule 48 (expression -> expression MOD expression .)
    SHOW            reduce using rule 48 (expression -> expression MOD expression .)
    IF              reduce using rule 48 (expression -> expression MOD expression .)
    REPEAT          reduce using rule 48 (expression -> expression MOD expression .)
    LOOP            reduce using rule 48 (expression -> expression MOD expression .)
    CLASS           reduce using rule 48 (expression -> expression MOD expression .)
    RETURN          reduce using rule 48 (expression -> expression MOD expression .)
    STOP            reduce using rule 48 (expression -> expression MOD expression .)
    SKIP            reduce using rule 48 (expression -> expression MOD expression .)
    $end            reduce using rule 48 (expression -> expression MOD expression .)
    RBRACE          reduce using rule 48 (expression -> expression MOD expression .)
    LBRACE          reduce using rule 48 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 48 (expression -> expression MOD expression .)
    COMMA           reduce using rule 48 (expression -> expression MOD expression .)
    NOT             reduce using rule 48 (expression -> expression MOD expression .)
    LPAREN          reduce using rule 48 (expression -> expression MOD expression .)
    TO_NUM          reduce using rule 48 (expression -> expression MOD expression .)
    TO_STR          reduce using rule 48 (expression -> expression MOD expression .)
    TO_FLOAT        reduce using rule 48 (expression -> expression MOD expression .)
    NUMBER          reduce using rule 48 (expression -> expression MOD expression .)
    STRING          reduce using rule 48 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 48 (expression -> expression MOD expression .)
    COLON           reduce using rule 48 (expression -> expression MOD expression .)
    POWER           shift and go to state 53

  ! POWER           [ reduce using rule 48 (expression -> expression MOD expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MOD             [ shift and go to state 52 ]
  ! GT              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! LE              [ shift and go to state 57 ]
  ! EQEQ            [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 95

    (49) expression -> expression POWER expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    PLUS            reduce using rule 49 (expression -> expression POWER expression .)
    MINUS           reduce using rule 49 (expression -> expression POWER expression .)
    TIMES           reduce using rule 49 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 49 (expression -> expression POWER expression .)
    MOD             reduce using rule 49 (expression -> expression POWER expression .)
    GT              reduce using rule 49 (expression -> expression POWER expression .)
    LT              reduce using rule 49 (expression -> expression POWER expression .)
    GE              reduce using rule 49 (expression -> expression POWER expression .)
    LE              reduce using rule 49 (expression -> expression POWER expression .)
    EQEQ            reduce using rule 49 (expression -> expression POWER expression .)
    NEQ             reduce using rule 49 (expression -> expression POWER expression .)
    AND             reduce using rule 49 (expression -> expression POWER expression .)
    OR              reduce using rule 49 (expression -> expression POWER expression .)
    LBRACKET        reduce using rule 49 (expression -> expression POWER expression .)
    IDENTIFIER      reduce using rule 49 (expression -> expression POWER expression .)
    FN              reduce using rule 49 (expression -> expression POWER expression .)
    SHOW            reduce using rule 49 (expression -> expression POWER expression .)
    IF              reduce using rule 49 (expression -> expression POWER expression .)
    REPEAT          reduce using rule 49 (expression -> expression POWER expression .)
    LOOP            reduce using rule 49 (expression -> expression POWER expression .)
    CLASS           reduce using rule 49 (expression -> expression POWER expression .)
    RETURN          reduce using rule 49 (expression -> expression POWER expression .)
    STOP            reduce using rule 49 (expression -> expression POWER expression .)
    SKIP            reduce using rule 49 (expression -> expression POWER expression .)
    $end            reduce using rule 49 (expression -> expression POWER expression .)
    RBRACE          reduce using rule 49 (expression -> expression POWER expression .)
    LBRACE          reduce using rule 49 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 49 (expression -> expression POWER expression .)
    COMMA           reduce using rule 49 (expression -> expression POWER expression .)
    NOT             reduce using rule 49 (expression -> expression POWER expression .)
    LPAREN          reduce using rule 49 (expression -> expression POWER expression .)
    TO_NUM          reduce using rule 49 (expression -> expression POWER expression .)
    TO_STR          reduce using rule 49 (expression -> expression POWER expression .)
    TO_FLOAT        reduce using rule 49 (expression -> expression POWER expression .)
    NUMBER          reduce using rule 49 (expression -> expression POWER expression .)
    STRING          reduce using rule 49 (expression -> expression POWER expression .)
    RBRACKET        reduce using rule 49 (expression -> expression POWER expression .)
    COLON           reduce using rule 49 (expression -> expression POWER expression .)
    POWER           shift and go to state 53

  ! POWER           [ reduce using rule 49 (expression -> expression POWER expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! MOD             [ shift and go to state 52 ]
  ! GT              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! LE              [ shift and go to state 57 ]
  ! EQEQ            [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 96

    (50) expression -> expression GT expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    GT              reduce using rule 50 (expression -> expression GT expression .)
    LT              reduce using rule 50 (expression -> expression GT expression .)
    GE              reduce using rule 50 (expression -> expression GT expression .)
    LE              reduce using rule 50 (expression -> expression GT expression .)
    EQEQ            reduce using rule 50 (expression -> expression GT expression .)
    NEQ             reduce using rule 50 (expression -> expression GT expression .)
    AND             reduce using rule 50 (expression -> expression GT expression .)
    OR              reduce using rule 50 (expression -> expression GT expression .)
    LBRACKET        reduce using rule 50 (expression -> expression GT expression .)
    IDENTIFIER      reduce using rule 50 (expression -> expression GT expression .)
    FN              reduce using rule 50 (expression -> expression GT expression .)
    SHOW            reduce using rule 50 (expression -> expression GT expression .)
    IF              reduce using rule 50 (expression -> expression GT expression .)
    REPEAT          reduce using rule 50 (expression -> expression GT expression .)
    LOOP            reduce using rule 50 (expression -> expression GT expression .)
    CLASS           reduce using rule 50 (expression -> expression GT expression .)
    RETURN          reduce using rule 50 (expression -> expression GT expression .)
    STOP            reduce using rule 50 (expression -> expression GT expression .)
    SKIP            reduce using rule 50 (expression -> expression GT expression .)
    $end            reduce using rule 50 (expression -> expression GT expression .)
    RBRACE          reduce using rule 50 (expression -> expression GT expression .)
    LBRACE          reduce using rule 50 (expression -> expression GT expression .)
    RPAREN          reduce using rule 50 (expression -> expression GT expression .)
    COMMA           reduce using rule 50 (expression -> expression GT expression .)
    NOT             reduce using rule 50 (expression -> expression GT expression .)
    LPAREN          reduce using rule 50 (expression -> expression GT expression .)
    TO_NUM          reduce using rule 50 (expression -> expression GT expression .)
    TO_STR          reduce using rule 50 (expression -> expression GT expression .)
    TO_FLOAT        reduce using rule 50 (expression -> expression GT expression .)
    NUMBER          reduce using rule 50 (expression -> expression GT expression .)
    STRING          reduce using rule 50 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 50 (expression -> expression GT expression .)
    COLON           reduce using rule 50 (expression -> expression GT expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53

  ! PLUS            [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! POWER           [ reduce using rule 50 (expression -> expression GT expression .) ]
  ! GT              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! LE              [ shift and go to state 57 ]
  ! EQEQ            [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 97

    (51) expression -> expression LT expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    GT              reduce using rule 51 (expression -> expression LT expression .)
    LT              reduce using rule 51 (expression -> expression LT expression .)
    GE              reduce using rule 51 (expression -> expression LT expression .)
    LE              reduce using rule 51 (expression -> expression LT expression .)
    EQEQ            reduce using rule 51 (expression -> expression LT expression .)
    NEQ             reduce using rule 51 (expression -> expression LT expression .)
    AND             reduce using rule 51 (expression -> expression LT expression .)
    OR              reduce using rule 51 (expression -> expression LT expression .)
    LBRACKET        reduce using rule 51 (expression -> expression LT expression .)
    IDENTIFIER      reduce using rule 51 (expression -> expression LT expression .)
    FN              reduce using rule 51 (expression -> expression LT expression .)
    SHOW            reduce using rule 51 (expression -> expression LT expression .)
    IF              reduce using rule 51 (expression -> expression LT expression .)
    REPEAT          reduce using rule 51 (expression -> expression LT expression .)
    LOOP            reduce using rule 51 (expression -> expression LT expression .)
    CLASS           reduce using rule 51 (expression -> expression LT expression .)
    RETURN          reduce using rule 51 (expression -> expression LT expression .)
    STOP            reduce using rule 51 (expression -> expression LT expression .)
    SKIP            reduce using rule 51 (expression -> expression LT expression .)
    $end            reduce using rule 51 (expression -> expression LT expression .)
    RBRACE          reduce using rule 51 (expression -> expression LT expression .)
    LBRACE          reduce using rule 51 (expression -> expression LT expression .)
    RPAREN          reduce using rule 51 (expression -> expression LT expression .)
    COMMA           reduce using rule 51 (expression -> expression LT expression .)
    NOT             reduce using rule 51 (expression -> expression LT expression .)
    LPAREN          reduce using rule 51 (expression -> expression LT expression .)
    TO_NUM          reduce using rule 51 (expression -> expression LT expression .)
    TO_STR          reduce using rule 51 (expression -> expression LT expression .)
    TO_FLOAT        reduce using rule 51 (expression -> expression LT expression .)
    NUMBER          reduce using rule 51 (expression -> expression LT expression .)
    STRING          reduce using rule 51 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 51 (expression -> expression LT expression .)
    COLON           reduce using rule 51 (expression -> expression LT expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53

  ! PLUS            [ reduce using rule 51 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 51 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 51 (expression -> expression LT expression .) ]
  ! POWER           [ reduce using rule 51 (expression -> expression LT expression .) ]
  ! GT              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! LE              [ shift and go to state 57 ]
  ! EQEQ            [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 98

    (52) expression -> expression GE expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    GT              reduce using rule 52 (expression -> expression GE expression .)
    LT              reduce using rule 52 (expression -> expression GE expression .)
    GE              reduce using rule 52 (expression -> expression GE expression .)
    LE              reduce using rule 52 (expression -> expression GE expression .)
    EQEQ            reduce using rule 52 (expression -> expression GE expression .)
    NEQ             reduce using rule 52 (expression -> expression GE expression .)
    AND             reduce using rule 52 (expression -> expression GE expression .)
    OR              reduce using rule 52 (expression -> expression GE expression .)
    LBRACKET        reduce using rule 52 (expression -> expression GE expression .)
    IDENTIFIER      reduce using rule 52 (expression -> expression GE expression .)
    FN              reduce using rule 52 (expression -> expression GE expression .)
    SHOW            reduce using rule 52 (expression -> expression GE expression .)
    IF              reduce using rule 52 (expression -> expression GE expression .)
    REPEAT          reduce using rule 52 (expression -> expression GE expression .)
    LOOP            reduce using rule 52 (expression -> expression GE expression .)
    CLASS           reduce using rule 52 (expression -> expression GE expression .)
    RETURN          reduce using rule 52 (expression -> expression GE expression .)
    STOP            reduce using rule 52 (expression -> expression GE expression .)
    SKIP            reduce using rule 52 (expression -> expression GE expression .)
    $end            reduce using rule 52 (expression -> expression GE expression .)
    RBRACE          reduce using rule 52 (expression -> expression GE expression .)
    LBRACE          reduce using rule 52 (expression -> expression GE expression .)
    RPAREN          reduce using rule 52 (expression -> expression GE expression .)
    COMMA           reduce using rule 52 (expression -> expression GE expression .)
    NOT             reduce using rule 52 (expression -> expression GE expression .)
    LPAREN          reduce using rule 52 (expression -> expression GE expression .)
    TO_NUM          reduce using rule 52 (expression -> expression GE expression .)
    TO_STR          reduce using rule 52 (expression -> expression GE expression .)
    TO_FLOAT        reduce using rule 52 (expression -> expression GE expression .)
    NUMBER          reduce using rule 52 (expression -> expression GE expression .)
    STRING          reduce using rule 52 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 52 (expression -> expression GE expression .)
    COLON           reduce using rule 52 (expression -> expression GE expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53

  ! PLUS            [ reduce using rule 52 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 52 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 52 (expression -> expression GE expression .) ]
  ! POWER           [ reduce using rule 52 (expression -> expression GE expression .) ]
  ! GT              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! LE              [ shift and go to state 57 ]
  ! EQEQ            [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 99

    (53) expression -> expression LE expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    GT              reduce using rule 53 (expression -> expression LE expression .)
    LT              reduce using rule 53 (expression -> expression LE expression .)
    GE              reduce using rule 53 (expression -> expression LE expression .)
    LE              reduce using rule 53 (expression -> expression LE expression .)
    EQEQ            reduce using rule 53 (expression -> expression LE expression .)
    NEQ             reduce using rule 53 (expression -> expression LE expression .)
    AND             reduce using rule 53 (expression -> expression LE expression .)
    OR              reduce using rule 53 (expression -> expression LE expression .)
    LBRACKET        reduce using rule 53 (expression -> expression LE expression .)
    IDENTIFIER      reduce using rule 53 (expression -> expression LE expression .)
    FN              reduce using rule 53 (expression -> expression LE expression .)
    SHOW            reduce using rule 53 (expression -> expression LE expression .)
    IF              reduce using rule 53 (expression -> expression LE expression .)
    REPEAT          reduce using rule 53 (expression -> expression LE expression .)
    LOOP            reduce using rule 53 (expression -> expression LE expression .)
    CLASS           reduce using rule 53 (expression -> expression LE expression .)
    RETURN          reduce using rule 53 (expression -> expression LE expression .)
    STOP            reduce using rule 53 (expression -> expression LE expression .)
    SKIP            reduce using rule 53 (expression -> expression LE expression .)
    $end            reduce using rule 53 (expression -> expression LE expression .)
    RBRACE          reduce using rule 53 (expression -> expression LE expression .)
    LBRACE          reduce using rule 53 (expression -> expression LE expression .)
    RPAREN          reduce using rule 53 (expression -> expression LE expression .)
    COMMA           reduce using rule 53 (expression -> expression LE expression .)
    NOT             reduce using rule 53 (expression -> expression LE expression .)
    LPAREN          reduce using rule 53 (expression -> expression LE expression .)
    TO_NUM          reduce using rule 53 (expression -> expression LE expression .)
    TO_STR          reduce using rule 53 (expression -> expression LE expression .)
    TO_FLOAT        reduce using rule 53 (expression -> expression LE expression .)
    NUMBER          reduce using rule 53 (expression -> expression LE expression .)
    STRING          reduce using rule 53 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 53 (expression -> expression LE expression .)
    COLON           reduce using rule 53 (expression -> expression LE expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53

  ! PLUS            [ reduce using rule 53 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 53 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 53 (expression -> expression LE expression .) ]
  ! POWER           [ reduce using rule 53 (expression -> expression LE expression .) ]
  ! GT              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! LE              [ shift and go to state 57 ]
  ! EQEQ            [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 100

    (54) expression -> expression EQEQ expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    EQEQ            reduce using rule 54 (expression -> expression EQEQ expression .)
    NEQ             reduce using rule 54 (expression -> expression EQEQ expression .)
    AND             reduce using rule 54 (expression -> expression EQEQ expression .)
    OR              reduce using rule 54 (expression -> expression EQEQ expression .)
    LBRACKET        reduce using rule 54 (expression -> expression EQEQ expression .)
    IDENTIFIER      reduce using rule 54 (expression -> expression EQEQ expression .)
    FN              reduce using rule 54 (expression -> expression EQEQ expression .)
    SHOW            reduce using rule 54 (expression -> expression EQEQ expression .)
    IF              reduce using rule 54 (expression -> expression EQEQ expression .)
    REPEAT          reduce using rule 54 (expression -> expression EQEQ expression .)
    LOOP            reduce using rule 54 (expression -> expression EQEQ expression .)
    CLASS           reduce using rule 54 (expression -> expression EQEQ expression .)
    RETURN          reduce using rule 54 (expression -> expression EQEQ expression .)
    STOP            reduce using rule 54 (expression -> expression EQEQ expression .)
    SKIP            reduce using rule 54 (expression -> expression EQEQ expression .)
    $end            reduce using rule 54 (expression -> expression EQEQ expression .)
    RBRACE          reduce using rule 54 (expression -> expression EQEQ expression .)
    LBRACE          reduce using rule 54 (expression -> expression EQEQ expression .)
    RPAREN          reduce using rule 54 (expression -> expression EQEQ expression .)
    COMMA           reduce using rule 54 (expression -> expression EQEQ expression .)
    NOT             reduce using rule 54 (expression -> expression EQEQ expression .)
    LPAREN          reduce using rule 54 (expression -> expression EQEQ expression .)
    TO_NUM          reduce using rule 54 (expression -> expression EQEQ expression .)
    TO_STR          reduce using rule 54 (expression -> expression EQEQ expression .)
    TO_FLOAT        reduce using rule 54 (expression -> expression EQEQ expression .)
    NUMBER          reduce using rule 54 (expression -> expression EQEQ expression .)
    STRING          reduce using rule 54 (expression -> expression EQEQ expression .)
    RBRACKET        reduce using rule 54 (expression -> expression EQEQ expression .)
    COLON           reduce using rule 54 (expression -> expression EQEQ expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57

  ! PLUS            [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! MINUS           [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! TIMES           [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! DIVIDE          [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! MOD             [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! POWER           [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! GT              [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! LT              [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! GE              [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! LE              [ reduce using rule 54 (expression -> expression EQEQ expression .) ]
  ! EQEQ            [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 101

    (55) expression -> expression NEQ expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    EQEQ            reduce using rule 55 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 55 (expression -> expression NEQ expression .)
    AND             reduce using rule 55 (expression -> expression NEQ expression .)
    OR              reduce using rule 55 (expression -> expression NEQ expression .)
    LBRACKET        reduce using rule 55 (expression -> expression NEQ expression .)
    IDENTIFIER      reduce using rule 55 (expression -> expression NEQ expression .)
    FN              reduce using rule 55 (expression -> expression NEQ expression .)
    SHOW            reduce using rule 55 (expression -> expression NEQ expression .)
    IF              reduce using rule 55 (expression -> expression NEQ expression .)
    REPEAT          reduce using rule 55 (expression -> expression NEQ expression .)
    LOOP            reduce using rule 55 (expression -> expression NEQ expression .)
    CLASS           reduce using rule 55 (expression -> expression NEQ expression .)
    RETURN          reduce using rule 55 (expression -> expression NEQ expression .)
    STOP            reduce using rule 55 (expression -> expression NEQ expression .)
    SKIP            reduce using rule 55 (expression -> expression NEQ expression .)
    $end            reduce using rule 55 (expression -> expression NEQ expression .)
    RBRACE          reduce using rule 55 (expression -> expression NEQ expression .)
    LBRACE          reduce using rule 55 (expression -> expression NEQ expression .)
    RPAREN          reduce using rule 55 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 55 (expression -> expression NEQ expression .)
    NOT             reduce using rule 55 (expression -> expression NEQ expression .)
    LPAREN          reduce using rule 55 (expression -> expression NEQ expression .)
    TO_NUM          reduce using rule 55 (expression -> expression NEQ expression .)
    TO_STR          reduce using rule 55 (expression -> expression NEQ expression .)
    TO_FLOAT        reduce using rule 55 (expression -> expression NEQ expression .)
    NUMBER          reduce using rule 55 (expression -> expression NEQ expression .)
    STRING          reduce using rule 55 (expression -> expression NEQ expression .)
    RBRACKET        reduce using rule 55 (expression -> expression NEQ expression .)
    COLON           reduce using rule 55 (expression -> expression NEQ expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57

  ! PLUS            [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! MOD             [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! POWER           [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! GE              [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! LE              [ reduce using rule 55 (expression -> expression NEQ expression .) ]
  ! EQEQ            [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 102

    (56) expression -> expression AND expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    AND             reduce using rule 56 (expression -> expression AND expression .)
    OR              reduce using rule 56 (expression -> expression AND expression .)
    LBRACKET        reduce using rule 56 (expression -> expression AND expression .)
    IDENTIFIER      reduce using rule 56 (expression -> expression AND expression .)
    FN              reduce using rule 56 (expression -> expression AND expression .)
    SHOW            reduce using rule 56 (expression -> expression AND expression .)
    IF              reduce using rule 56 (expression -> expression AND expression .)
    REPEAT          reduce using rule 56 (expression -> expression AND expression .)
    LOOP            reduce using rule 56 (expression -> expression AND expression .)
    CLASS           reduce using rule 56 (expression -> expression AND expression .)
    RETURN          reduce using rule 56 (expression -> expression AND expression .)
    STOP            reduce using rule 56 (expression -> expression AND expression .)
    SKIP            reduce using rule 56 (expression -> expression AND expression .)
    $end            reduce using rule 56 (expression -> expression AND expression .)
    RBRACE          reduce using rule 56 (expression -> expression AND expression .)
    LBRACE          reduce using rule 56 (expression -> expression AND expression .)
    RPAREN          reduce using rule 56 (expression -> expression AND expression .)
    COMMA           reduce using rule 56 (expression -> expression AND expression .)
    NOT             reduce using rule 56 (expression -> expression AND expression .)
    LPAREN          reduce using rule 56 (expression -> expression AND expression .)
    TO_NUM          reduce using rule 56 (expression -> expression AND expression .)
    TO_STR          reduce using rule 56 (expression -> expression AND expression .)
    TO_FLOAT        reduce using rule 56 (expression -> expression AND expression .)
    NUMBER          reduce using rule 56 (expression -> expression AND expression .)
    STRING          reduce using rule 56 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 56 (expression -> expression AND expression .)
    COLON           reduce using rule 56 (expression -> expression AND expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59

  ! PLUS            [ reduce using rule 56 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 56 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 56 (expression -> expression AND expression .) ]
  ! POWER           [ reduce using rule 56 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 56 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 56 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 56 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 56 (expression -> expression AND expression .) ]
  ! EQEQ            [ reduce using rule 56 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 56 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 103

    (57) expression -> expression OR expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    OR              reduce using rule 57 (expression -> expression OR expression .)
    LBRACKET        reduce using rule 57 (expression -> expression OR expression .)
    IDENTIFIER      reduce using rule 57 (expression -> expression OR expression .)
    FN              reduce using rule 57 (expression -> expression OR expression .)
    SHOW            reduce using rule 57 (expression -> expression OR expression .)
    IF              reduce using rule 57 (expression -> expression OR expression .)
    REPEAT          reduce using rule 57 (expression -> expression OR expression .)
    LOOP            reduce using rule 57 (expression -> expression OR expression .)
    CLASS           reduce using rule 57 (expression -> expression OR expression .)
    RETURN          reduce using rule 57 (expression -> expression OR expression .)
    STOP            reduce using rule 57 (expression -> expression OR expression .)
    SKIP            reduce using rule 57 (expression -> expression OR expression .)
    $end            reduce using rule 57 (expression -> expression OR expression .)
    RBRACE          reduce using rule 57 (expression -> expression OR expression .)
    LBRACE          reduce using rule 57 (expression -> expression OR expression .)
    RPAREN          reduce using rule 57 (expression -> expression OR expression .)
    COMMA           reduce using rule 57 (expression -> expression OR expression .)
    NOT             reduce using rule 57 (expression -> expression OR expression .)
    LPAREN          reduce using rule 57 (expression -> expression OR expression .)
    TO_NUM          reduce using rule 57 (expression -> expression OR expression .)
    TO_STR          reduce using rule 57 (expression -> expression OR expression .)
    TO_FLOAT        reduce using rule 57 (expression -> expression OR expression .)
    NUMBER          reduce using rule 57 (expression -> expression OR expression .)
    STRING          reduce using rule 57 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 57 (expression -> expression OR expression .)
    COLON           reduce using rule 57 (expression -> expression OR expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60

  ! PLUS            [ reduce using rule 57 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 57 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 57 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 57 (expression -> expression OR expression .) ]
  ! POWER           [ reduce using rule 57 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 57 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 57 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 57 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 57 (expression -> expression OR expression .) ]
  ! EQEQ            [ reduce using rule 57 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 57 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 57 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 104

    (69) expression -> expression LBRACKET expression . RBRACKET
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    RBRACKET        shift and go to state 126
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62


state 105

    (22) func_call -> IDENTIFIER LPAREN arguments RPAREN .

    IDENTIFIER      reduce using rule 22 (func_call -> IDENTIFIER LPAREN arguments RPAREN .)
    FN              reduce using rule 22 (func_call -> IDENTIFIER LPAREN arguments RPAREN .)
    SHOW            reduce using rule 22 (func_call -> IDENTIFIER LPAREN arguments RPAREN .)
    IF              reduce using rule 22 (func_call -> IDENTIFIER LPAREN arguments RPAREN .)
    REPEAT          reduce using rule 22 (func_call -> IDENTIFIER LPAREN arguments RPAREN .)
    LOOP            reduce using rule 22 (func_call -> IDENTIFIER LPAREN arguments RPAREN .)
    CLASS           reduce using rule 22 (func_call -> IDENTIFIER LPAREN arguments RPAREN .)
    RETURN          reduce using rule 22 (func_call -> IDENTIFIER LPAREN arguments RPAREN .)
    STOP            reduce using rule 22 (func_call -> IDENTIFIER LPAREN arguments RPAREN .)
    SKIP            reduce using rule 22 (func_call -> IDENTIFIER LPAREN arguments RPAREN .)
    $end            reduce using rule 22 (func_call -> IDENTIFIER LPAREN arguments RPAREN .)
    RBRACE          reduce using rule 22 (func_call -> IDENTIFIER LPAREN arguments RPAREN .)


state 106

    (60) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    EQEQ            reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    FN              reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    SHOW            reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    REPEAT          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    CLASS           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    STOP            reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    SKIP            reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    TO_NUM          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    TO_STR          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    TO_FLOAT        reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 60 (expression -> LPAREN expression RPAREN .)


state 107

    (26) argument_list -> argument_list COMMA . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 127

state 108

    (29) ask_stmt -> IDENTIFIER ASK expression expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    IDENTIFIER      reduce using rule 29 (ask_stmt -> IDENTIFIER ASK expression expression .)
    FN              reduce using rule 29 (ask_stmt -> IDENTIFIER ASK expression expression .)
    SHOW            reduce using rule 29 (ask_stmt -> IDENTIFIER ASK expression expression .)
    IF              reduce using rule 29 (ask_stmt -> IDENTIFIER ASK expression expression .)
    REPEAT          reduce using rule 29 (ask_stmt -> IDENTIFIER ASK expression expression .)
    LOOP            reduce using rule 29 (ask_stmt -> IDENTIFIER ASK expression expression .)
    CLASS           reduce using rule 29 (ask_stmt -> IDENTIFIER ASK expression expression .)
    RETURN          reduce using rule 29 (ask_stmt -> IDENTIFIER ASK expression expression .)
    STOP            reduce using rule 29 (ask_stmt -> IDENTIFIER ASK expression expression .)
    SKIP            reduce using rule 29 (ask_stmt -> IDENTIFIER ASK expression expression .)
    $end            reduce using rule 29 (ask_stmt -> IDENTIFIER ASK expression expression .)
    RBRACE          reduce using rule 29 (ask_stmt -> IDENTIFIER ASK expression expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62


state 109

    (45) expression -> expression MINUS . expression
    (59) expression -> MINUS . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 128

state 110

    (69) expression -> expression LBRACKET . expression RBRACKET
    (64) expression -> LBRACKET . array_items RBRACKET
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER
    (65) array_items -> . expression_list
    (66) array_items -> . empty
    (67) expression_list -> . expression
    (68) expression_list -> . expression_list COMMA expression
    (79) empty -> .

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26
    RBRACKET        reduce using rule 79 (empty -> .)

    expression                     shift and go to state 129
    array_items                    shift and go to state 74
    expression_list                shift and go to state 75
    empty                          shift and go to state 76

state 111

    (61) expression -> TO_NUM LPAREN expression . RPAREN
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    RPAREN          shift and go to state 130
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62


state 112

    (62) expression -> TO_STR LPAREN expression . RPAREN
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    RPAREN          shift and go to state 131
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62


state 113

    (63) expression -> TO_FLOAT LPAREN expression . RPAREN
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    RPAREN          shift and go to state 132
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62


state 114

    (64) expression -> LBRACKET array_items RBRACKET .

    PLUS            reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    MINUS           reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    TIMES           reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    DIVIDE          reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    MOD             reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    POWER           reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    GT              reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    LT              reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    GE              reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    LE              reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    EQEQ            reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    NEQ             reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    AND             reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    OR              reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    LBRACKET        reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    IDENTIFIER      reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    FN              reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    SHOW            reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    IF              reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    REPEAT          reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    LOOP            reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    CLASS           reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    RETURN          reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    STOP            reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    SKIP            reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    $end            reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    RBRACE          reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    LBRACE          reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    RPAREN          reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    COMMA           reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    NOT             reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    LPAREN          reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    TO_NUM          reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    TO_STR          reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    TO_FLOAT        reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    NUMBER          reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    STRING          reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    RBRACKET        reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)
    COLON           reduce using rule 64 (expression -> LBRACKET array_items RBRACKET .)


state 115

    (68) expression_list -> expression_list COMMA . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 133

state 116

    (70) expression -> LBRACE dict_items RBRACE .

    PLUS            reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    MINUS           reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    TIMES           reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    DIVIDE          reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    MOD             reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    POWER           reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    GT              reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    LT              reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    GE              reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    LE              reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    EQEQ            reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    NEQ             reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    AND             reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    OR              reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    LBRACKET        reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    IDENTIFIER      reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    FN              reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    SHOW            reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    IF              reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    REPEAT          reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    LOOP            reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    CLASS           reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    RETURN          reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    STOP            reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    SKIP            reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    $end            reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    RBRACE          reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    LBRACE          reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    RPAREN          reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    COMMA           reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    NOT             reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    LPAREN          reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    TO_NUM          reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    TO_STR          reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    TO_FLOAT        reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    NUMBER          reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    STRING          reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    RBRACKET        reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)
    COLON           reduce using rule 70 (expression -> LBRACE dict_items RBRACE .)


state 117

    (74) dict_item_list -> dict_item_list COMMA . dict_item
    (75) dict_item -> . expression COLON expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    dict_item                      shift and go to state 134
    expression                     shift and go to state 82

state 118

    (75) dict_item -> expression COLON . expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 135

state 119

    (20) parameter_list -> IDENTIFIER .

    COMMA           reduce using rule 20 (parameter_list -> IDENTIFIER .)
    RPAREN          reduce using rule 20 (parameter_list -> IDENTIFIER .)


state 120

    (17) func_def -> FN IDENTIFIER LPAREN parameters . RPAREN block

    RPAREN          shift and go to state 136


state 121

    (18) parameters -> parameter_list .
    (21) parameter_list -> parameter_list . COMMA IDENTIFIER

    RPAREN          reduce using rule 18 (parameters -> parameter_list .)
    COMMA           shift and go to state 137


state 122

    (19) parameters -> empty .

    RPAREN          reduce using rule 19 (parameters -> empty .)


state 123

    (30) if_statement -> IF expression block elseif_list . else_block
    (31) elseif_list -> elseif_list . elseif
    (34) else_block -> . ELSE block
    (35) else_block -> . empty
    (33) elseif -> . ELSEIF expression block
    (79) empty -> .

    ELSE            shift and go to state 140
    ELSEIF          shift and go to state 142
    IDENTIFIER      reduce using rule 79 (empty -> .)
    FN              reduce using rule 79 (empty -> .)
    SHOW            reduce using rule 79 (empty -> .)
    IF              reduce using rule 79 (empty -> .)
    REPEAT          reduce using rule 79 (empty -> .)
    LOOP            reduce using rule 79 (empty -> .)
    CLASS           reduce using rule 79 (empty -> .)
    RETURN          reduce using rule 79 (empty -> .)
    STOP            reduce using rule 79 (empty -> .)
    SKIP            reduce using rule 79 (empty -> .)
    $end            reduce using rule 79 (empty -> .)
    RBRACE          reduce using rule 79 (empty -> .)

    else_block                     shift and go to state 138
    elseif                         shift and go to state 139
    empty                          shift and go to state 141

state 124

    (32) elseif_list -> empty .

    ELSE            reduce using rule 32 (elseif_list -> empty .)
    ELSEIF          reduce using rule 32 (elseif_list -> empty .)
    IDENTIFIER      reduce using rule 32 (elseif_list -> empty .)
    FN              reduce using rule 32 (elseif_list -> empty .)
    SHOW            reduce using rule 32 (elseif_list -> empty .)
    IF              reduce using rule 32 (elseif_list -> empty .)
    REPEAT          reduce using rule 32 (elseif_list -> empty .)
    LOOP            reduce using rule 32 (elseif_list -> empty .)
    CLASS           reduce using rule 32 (elseif_list -> empty .)
    RETURN          reduce using rule 32 (elseif_list -> empty .)
    STOP            reduce using rule 32 (elseif_list -> empty .)
    SKIP            reduce using rule 32 (elseif_list -> empty .)
    $end            reduce using rule 32 (elseif_list -> empty .)
    RBRACE          reduce using rule 32 (elseif_list -> empty .)


state 125

    (43) block -> LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . var_decl
    (5) statement -> . var_assign
    (6) statement -> . func_def
    (7) statement -> . func_call
    (8) statement -> . show_stmt
    (9) statement -> . ask_stmt
    (10) statement -> . if_statement
    (11) statement -> . loop_statement
    (12) statement -> . class_def
    (13) statement -> . return_stmt
    (14) statement -> . loop_control
    (15) var_decl -> . IDENTIFIER expression
    (16) var_assign -> . IDENTIFIER EQUALS expression
    (17) func_def -> . FN IDENTIFIER LPAREN parameters RPAREN block
    (22) func_call -> . IDENTIFIER LPAREN arguments RPAREN
    (27) show_stmt -> . SHOW expression
    (28) ask_stmt -> . IDENTIFIER ASK expression
    (29) ask_stmt -> . IDENTIFIER ASK expression expression
    (30) if_statement -> . IF expression block elseif_list else_block
    (36) loop_statement -> . REPEAT expression block
    (37) loop_statement -> . LOOP expression block
    (42) class_def -> . CLASS IDENTIFIER block
    (40) return_stmt -> . RETURN
    (41) return_stmt -> . RETURN expression
    (38) loop_control -> . STOP
    (39) loop_control -> . SKIP

    RBRACE          shift and go to state 143
    IDENTIFIER      shift and go to state 15
    FN              shift and go to state 16
    SHOW            shift and go to state 17
    IF              shift and go to state 18
    REPEAT          shift and go to state 19
    LOOP            shift and go to state 20
    CLASS           shift and go to state 21
    RETURN          shift and go to state 22
    STOP            shift and go to state 23
    SKIP            shift and go to state 24

    statement                      shift and go to state 25
    var_decl                       shift and go to state 4
    var_assign                     shift and go to state 5
    func_def                       shift and go to state 6
    func_call                      shift and go to state 7
    show_stmt                      shift and go to state 8
    ask_stmt                       shift and go to state 9
    if_statement                   shift and go to state 10
    loop_statement                 shift and go to state 11
    class_def                      shift and go to state 12
    return_stmt                    shift and go to state 13
    loop_control                   shift and go to state 14

state 126

    (69) expression -> expression LBRACKET expression RBRACKET .

    PLUS            reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    POWER           reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    EQEQ            reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    IDENTIFIER      reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    FN              reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    SHOW            reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    IF              reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    REPEAT          reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    CLASS           reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    STOP            reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    SKIP            reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    $end            reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    NOT             reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    TO_NUM          reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    TO_STR          reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    TO_FLOAT        reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    STRING          reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 69 (expression -> expression LBRACKET expression RBRACKET .)


state 127

    (26) argument_list -> argument_list COMMA expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    COMMA           reduce using rule 26 (argument_list -> argument_list COMMA expression .)
    RPAREN          reduce using rule 26 (argument_list -> argument_list COMMA expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62


state 128

    (45) expression -> expression MINUS expression .
    (59) expression -> MINUS expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

  ! reduce/reduce conflict for PLUS resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for TIMES resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for MOD resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for POWER resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for GT resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for LT resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for GE resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for LE resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for EQEQ resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for NEQ resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for AND resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for OR resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for IDENTIFIER resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for FN resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for SHOW resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for IF resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for REPEAT resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for LOOP resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for CLASS resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for STOP resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for SKIP resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for $end resolved using rule 45 (expression -> expression MINUS expression .)
  ! reduce/reduce conflict for RBRACE resolved using rule 45 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 45 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 45 (expression -> expression MINUS expression .)
    GT              reduce using rule 45 (expression -> expression MINUS expression .)
    LT              reduce using rule 45 (expression -> expression MINUS expression .)
    GE              reduce using rule 45 (expression -> expression MINUS expression .)
    LE              reduce using rule 45 (expression -> expression MINUS expression .)
    EQEQ            reduce using rule 45 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 45 (expression -> expression MINUS expression .)
    AND             reduce using rule 45 (expression -> expression MINUS expression .)
    OR              reduce using rule 45 (expression -> expression MINUS expression .)
    LBRACKET        reduce using rule 45 (expression -> expression MINUS expression .)
    NOT             reduce using rule 45 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 45 (expression -> expression MINUS expression .)
    TO_NUM          reduce using rule 45 (expression -> expression MINUS expression .)
    TO_STR          reduce using rule 45 (expression -> expression MINUS expression .)
    TO_FLOAT        reduce using rule 45 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 45 (expression -> expression MINUS expression .)
    NUMBER          reduce using rule 45 (expression -> expression MINUS expression .)
    STRING          reduce using rule 45 (expression -> expression MINUS expression .)
    IDENTIFIER      reduce using rule 45 (expression -> expression MINUS expression .)
    FN              reduce using rule 45 (expression -> expression MINUS expression .)
    SHOW            reduce using rule 45 (expression -> expression MINUS expression .)
    IF              reduce using rule 45 (expression -> expression MINUS expression .)
    REPEAT          reduce using rule 45 (expression -> expression MINUS expression .)
    LOOP            reduce using rule 45 (expression -> expression MINUS expression .)
    CLASS           reduce using rule 45 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 45 (expression -> expression MINUS expression .)
    STOP            reduce using rule 45 (expression -> expression MINUS expression .)
    SKIP            reduce using rule 45 (expression -> expression MINUS expression .)
    $end            reduce using rule 45 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 45 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53

  ! TIMES           [ reduce using rule 45 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 45 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 45 (expression -> expression MINUS expression .) ]
  ! PLUS            [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! TIMES           [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! MOD             [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! POWER           [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! GT              [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! LT              [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! GE              [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! LE              [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! EQEQ            [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! NEQ             [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! AND             [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! OR              [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! LBRACKET        [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! IDENTIFIER      [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! FN              [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! SHOW            [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! IF              [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! REPEAT          [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! LOOP            [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! CLASS           [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! RETURN          [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! STOP            [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! SKIP            [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! $end            [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! RBRACE          [ reduce using rule 59 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! GT              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! GE              [ shift and go to state 56 ]
  ! LE              [ shift and go to state 57 ]
  ! EQEQ            [ shift and go to state 58 ]
  ! NEQ             [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! OR              [ shift and go to state 61 ]
  ! LBRACKET        [ shift and go to state 62 ]


state 129

    (69) expression -> expression LBRACKET expression . RBRACKET
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET
    (67) expression_list -> expression .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 126
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62
    COMMA           reduce using rule 67 (expression_list -> expression .)

  ! RBRACKET        [ reduce using rule 67 (expression_list -> expression .) ]


state 130

    (61) expression -> TO_NUM LPAREN expression RPAREN .

    PLUS            reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    MINUS           reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    TIMES           reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    MOD             reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    POWER           reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    GT              reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    LT              reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    GE              reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    LE              reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    EQEQ            reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    NEQ             reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    AND             reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    OR              reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    FN              reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    SHOW            reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    IF              reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    REPEAT          reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    LOOP            reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    CLASS           reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    RETURN          reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    STOP            reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    SKIP            reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    $end            reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    RBRACE          reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    LBRACE          reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    RPAREN          reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    COMMA           reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    NOT             reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    LPAREN          reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    TO_NUM          reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    TO_STR          reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    TO_FLOAT        reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    NUMBER          reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    STRING          reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)
    COLON           reduce using rule 61 (expression -> TO_NUM LPAREN expression RPAREN .)


state 131

    (62) expression -> TO_STR LPAREN expression RPAREN .

    PLUS            reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    MINUS           reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    TIMES           reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    MOD             reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    POWER           reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    GT              reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    LT              reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    GE              reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    LE              reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    EQEQ            reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    NEQ             reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    AND             reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    OR              reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    FN              reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    SHOW            reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    IF              reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    REPEAT          reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    LOOP            reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    CLASS           reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    RETURN          reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    STOP            reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    SKIP            reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    $end            reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    RBRACE          reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    LBRACE          reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    RPAREN          reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    COMMA           reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    NOT             reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    LPAREN          reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    TO_NUM          reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    TO_STR          reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    TO_FLOAT        reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    NUMBER          reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    STRING          reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)
    COLON           reduce using rule 62 (expression -> TO_STR LPAREN expression RPAREN .)


state 132

    (63) expression -> TO_FLOAT LPAREN expression RPAREN .

    PLUS            reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    MINUS           reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    TIMES           reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    MOD             reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    POWER           reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    GT              reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    LT              reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    GE              reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    LE              reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    EQEQ            reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    NEQ             reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    AND             reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    OR              reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    FN              reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    SHOW            reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    IF              reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    REPEAT          reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    LOOP            reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    CLASS           reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    RETURN          reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    STOP            reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    SKIP            reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    $end            reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    RBRACE          reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    LBRACE          reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    RPAREN          reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    COMMA           reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    NOT             reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    LPAREN          reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    TO_NUM          reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    TO_STR          reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    TO_FLOAT        reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    NUMBER          reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    STRING          reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)
    COLON           reduce using rule 63 (expression -> TO_FLOAT LPAREN expression RPAREN .)


state 133

    (68) expression_list -> expression_list COMMA expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    COMMA           reduce using rule 68 (expression_list -> expression_list COMMA expression .)
    RBRACKET        reduce using rule 68 (expression_list -> expression_list COMMA expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62


state 134

    (74) dict_item_list -> dict_item_list COMMA dict_item .

    COMMA           reduce using rule 74 (dict_item_list -> dict_item_list COMMA dict_item .)
    RBRACE          reduce using rule 74 (dict_item_list -> dict_item_list COMMA dict_item .)


state 135

    (75) dict_item -> expression COLON expression .
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET

    COMMA           reduce using rule 75 (dict_item -> expression COLON expression .)
    RBRACE          reduce using rule 75 (dict_item -> expression COLON expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62


state 136

    (17) func_def -> FN IDENTIFIER LPAREN parameters RPAREN . block
    (43) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 86

    block                          shift and go to state 144

state 137

    (21) parameter_list -> parameter_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 145


state 138

    (30) if_statement -> IF expression block elseif_list else_block .

    IDENTIFIER      reduce using rule 30 (if_statement -> IF expression block elseif_list else_block .)
    FN              reduce using rule 30 (if_statement -> IF expression block elseif_list else_block .)
    SHOW            reduce using rule 30 (if_statement -> IF expression block elseif_list else_block .)
    IF              reduce using rule 30 (if_statement -> IF expression block elseif_list else_block .)
    REPEAT          reduce using rule 30 (if_statement -> IF expression block elseif_list else_block .)
    LOOP            reduce using rule 30 (if_statement -> IF expression block elseif_list else_block .)
    CLASS           reduce using rule 30 (if_statement -> IF expression block elseif_list else_block .)
    RETURN          reduce using rule 30 (if_statement -> IF expression block elseif_list else_block .)
    STOP            reduce using rule 30 (if_statement -> IF expression block elseif_list else_block .)
    SKIP            reduce using rule 30 (if_statement -> IF expression block elseif_list else_block .)
    $end            reduce using rule 30 (if_statement -> IF expression block elseif_list else_block .)
    RBRACE          reduce using rule 30 (if_statement -> IF expression block elseif_list else_block .)


state 139

    (31) elseif_list -> elseif_list elseif .

    ELSE            reduce using rule 31 (elseif_list -> elseif_list elseif .)
    ELSEIF          reduce using rule 31 (elseif_list -> elseif_list elseif .)
    IDENTIFIER      reduce using rule 31 (elseif_list -> elseif_list elseif .)
    FN              reduce using rule 31 (elseif_list -> elseif_list elseif .)
    SHOW            reduce using rule 31 (elseif_list -> elseif_list elseif .)
    IF              reduce using rule 31 (elseif_list -> elseif_list elseif .)
    REPEAT          reduce using rule 31 (elseif_list -> elseif_list elseif .)
    LOOP            reduce using rule 31 (elseif_list -> elseif_list elseif .)
    CLASS           reduce using rule 31 (elseif_list -> elseif_list elseif .)
    RETURN          reduce using rule 31 (elseif_list -> elseif_list elseif .)
    STOP            reduce using rule 31 (elseif_list -> elseif_list elseif .)
    SKIP            reduce using rule 31 (elseif_list -> elseif_list elseif .)
    $end            reduce using rule 31 (elseif_list -> elseif_list elseif .)
    RBRACE          reduce using rule 31 (elseif_list -> elseif_list elseif .)


state 140

    (34) else_block -> ELSE . block
    (43) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 86

    block                          shift and go to state 146

state 141

    (35) else_block -> empty .

    IDENTIFIER      reduce using rule 35 (else_block -> empty .)
    FN              reduce using rule 35 (else_block -> empty .)
    SHOW            reduce using rule 35 (else_block -> empty .)
    IF              reduce using rule 35 (else_block -> empty .)
    REPEAT          reduce using rule 35 (else_block -> empty .)
    LOOP            reduce using rule 35 (else_block -> empty .)
    CLASS           reduce using rule 35 (else_block -> empty .)
    RETURN          reduce using rule 35 (else_block -> empty .)
    STOP            reduce using rule 35 (else_block -> empty .)
    SKIP            reduce using rule 35 (else_block -> empty .)
    $end            reduce using rule 35 (else_block -> empty .)
    RBRACE          reduce using rule 35 (else_block -> empty .)


state 142

    (33) elseif -> ELSEIF . expression block
    (44) expression -> . expression PLUS expression
    (45) expression -> . expression MINUS expression
    (46) expression -> . expression TIMES expression
    (47) expression -> . expression DIVIDE expression
    (48) expression -> . expression MOD expression
    (49) expression -> . expression POWER expression
    (50) expression -> . expression GT expression
    (51) expression -> . expression LT expression
    (52) expression -> . expression GE expression
    (53) expression -> . expression LE expression
    (54) expression -> . expression EQEQ expression
    (55) expression -> . expression NEQ expression
    (56) expression -> . expression AND expression
    (57) expression -> . expression OR expression
    (58) expression -> . NOT expression
    (59) expression -> . MINUS expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . TO_NUM LPAREN expression RPAREN
    (62) expression -> . TO_STR LPAREN expression RPAREN
    (63) expression -> . TO_FLOAT LPAREN expression RPAREN
    (64) expression -> . LBRACKET array_items RBRACKET
    (69) expression -> . expression LBRACKET expression RBRACKET
    (70) expression -> . LBRACE dict_items RBRACE
    (76) expression -> . NUMBER
    (77) expression -> . STRING
    (78) expression -> . IDENTIFIER

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 42
    TO_NUM          shift and go to state 33
    TO_STR          shift and go to state 34
    TO_FLOAT        shift and go to state 35
    LBRACKET        shift and go to state 36
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    IDENTIFIER      shift and go to state 26

    expression                     shift and go to state 147

state 143

    (43) block -> LBRACE statement_list RBRACE .

    ELSE            reduce using rule 43 (block -> LBRACE statement_list RBRACE .)
    ELSEIF          reduce using rule 43 (block -> LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 43 (block -> LBRACE statement_list RBRACE .)
    FN              reduce using rule 43 (block -> LBRACE statement_list RBRACE .)
    SHOW            reduce using rule 43 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 43 (block -> LBRACE statement_list RBRACE .)
    REPEAT          reduce using rule 43 (block -> LBRACE statement_list RBRACE .)
    LOOP            reduce using rule 43 (block -> LBRACE statement_list RBRACE .)
    CLASS           reduce using rule 43 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 43 (block -> LBRACE statement_list RBRACE .)
    STOP            reduce using rule 43 (block -> LBRACE statement_list RBRACE .)
    SKIP            reduce using rule 43 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 43 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 43 (block -> LBRACE statement_list RBRACE .)


state 144

    (17) func_def -> FN IDENTIFIER LPAREN parameters RPAREN block .

    IDENTIFIER      reduce using rule 17 (func_def -> FN IDENTIFIER LPAREN parameters RPAREN block .)
    FN              reduce using rule 17 (func_def -> FN IDENTIFIER LPAREN parameters RPAREN block .)
    SHOW            reduce using rule 17 (func_def -> FN IDENTIFIER LPAREN parameters RPAREN block .)
    IF              reduce using rule 17 (func_def -> FN IDENTIFIER LPAREN parameters RPAREN block .)
    REPEAT          reduce using rule 17 (func_def -> FN IDENTIFIER LPAREN parameters RPAREN block .)
    LOOP            reduce using rule 17 (func_def -> FN IDENTIFIER LPAREN parameters RPAREN block .)
    CLASS           reduce using rule 17 (func_def -> FN IDENTIFIER LPAREN parameters RPAREN block .)
    RETURN          reduce using rule 17 (func_def -> FN IDENTIFIER LPAREN parameters RPAREN block .)
    STOP            reduce using rule 17 (func_def -> FN IDENTIFIER LPAREN parameters RPAREN block .)
    SKIP            reduce using rule 17 (func_def -> FN IDENTIFIER LPAREN parameters RPAREN block .)
    $end            reduce using rule 17 (func_def -> FN IDENTIFIER LPAREN parameters RPAREN block .)
    RBRACE          reduce using rule 17 (func_def -> FN IDENTIFIER LPAREN parameters RPAREN block .)


state 145

    (21) parameter_list -> parameter_list COMMA IDENTIFIER .

    COMMA           reduce using rule 21 (parameter_list -> parameter_list COMMA IDENTIFIER .)
    RPAREN          reduce using rule 21 (parameter_list -> parameter_list COMMA IDENTIFIER .)


state 146

    (34) else_block -> ELSE block .

    IDENTIFIER      reduce using rule 34 (else_block -> ELSE block .)
    FN              reduce using rule 34 (else_block -> ELSE block .)
    SHOW            reduce using rule 34 (else_block -> ELSE block .)
    IF              reduce using rule 34 (else_block -> ELSE block .)
    REPEAT          reduce using rule 34 (else_block -> ELSE block .)
    LOOP            reduce using rule 34 (else_block -> ELSE block .)
    CLASS           reduce using rule 34 (else_block -> ELSE block .)
    RETURN          reduce using rule 34 (else_block -> ELSE block .)
    STOP            reduce using rule 34 (else_block -> ELSE block .)
    SKIP            reduce using rule 34 (else_block -> ELSE block .)
    $end            reduce using rule 34 (else_block -> ELSE block .)
    RBRACE          reduce using rule 34 (else_block -> ELSE block .)


state 147

    (33) elseif -> ELSEIF expression . block
    (44) expression -> expression . PLUS expression
    (45) expression -> expression . MINUS expression
    (46) expression -> expression . TIMES expression
    (47) expression -> expression . DIVIDE expression
    (48) expression -> expression . MOD expression
    (49) expression -> expression . POWER expression
    (50) expression -> expression . GT expression
    (51) expression -> expression . LT expression
    (52) expression -> expression . GE expression
    (53) expression -> expression . LE expression
    (54) expression -> expression . EQEQ expression
    (55) expression -> expression . NEQ expression
    (56) expression -> expression . AND expression
    (57) expression -> expression . OR expression
    (69) expression -> expression . LBRACKET expression RBRACKET
    (43) block -> . LBRACE statement_list RBRACE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    MOD             shift and go to state 52
    POWER           shift and go to state 53
    GT              shift and go to state 54
    LT              shift and go to state 55
    GE              shift and go to state 56
    LE              shift and go to state 57
    EQEQ            shift and go to state 58
    NEQ             shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    LBRACKET        shift and go to state 62
    LBRACE          shift and go to state 86

    block                          shift and go to state 148

state 148

    (33) elseif -> ELSEIF expression block .

    ELSE            reduce using rule 33 (elseif -> ELSEIF expression block .)
    ELSEIF          reduce using rule 33 (elseif -> ELSEIF expression block .)
    IDENTIFIER      reduce using rule 33 (elseif -> ELSEIF expression block .)
    FN              reduce using rule 33 (elseif -> ELSEIF expression block .)
    SHOW            reduce using rule 33 (elseif -> ELSEIF expression block .)
    IF              reduce using rule 33 (elseif -> ELSEIF expression block .)
    REPEAT          reduce using rule 33 (elseif -> ELSEIF expression block .)
    LOOP            reduce using rule 33 (elseif -> ELSEIF expression block .)
    CLASS           reduce using rule 33 (elseif -> ELSEIF expression block .)
    RETURN          reduce using rule 33 (elseif -> ELSEIF expression block .)
    STOP            reduce using rule 33 (elseif -> ELSEIF expression block .)
    SKIP            reduce using rule 33 (elseif -> ELSEIF expression block .)
    $end            reduce using rule 33 (elseif -> ELSEIF expression block .)
    RBRACE          reduce using rule 33 (elseif -> ELSEIF expression block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFIER in state 22 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 65 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 68 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 129 resolved as shift
WARNING: reduce/reduce conflict in state 128 resolved using rule (expression -> expression MINUS expression)
WARNING: rejected rule (expression -> MINUS expression) in state 128
